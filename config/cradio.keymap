/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "chords.keymap"

#define PHT(key1, key2) &prefer_hold_tap key1 key2
#define HPT(key1, key2) &hold_prefer_tap key1 key2
/ {
    behaviors {
        hold_prefer_tap: hold_prefer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFER_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        prefer_hold_tap: prefer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "PREFER_HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};

// Like autoshift but for gui instead
#define AG(keycode) HPT(LG(keycode), keycode)

// Sticky mod on hold
#define SM(mod, keycode) &sm mod keycode
&sk {
    release-after-ms = <2000>;
    quick-release;
};
/ {
    behaviors {
        sm: sticky_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_MOD";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&sk>, <&kp>;
        };
    };
};

// chord spc + bkspc to delete a word
/ {
  combos {
    compatible = "zmk,combos";
    combo_del_word {
      timeout-ms = <60>;
      bindings = <&del_word>;
      key-positions = <31 32>;
    };
  };
};

/ {
  macros {
        del_word: del_word {
            label = "del_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp BSPC>
                , <&macro_release &kp LALT>
                ;
        };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        AG(W)  AG(L)  AG(Y)  AG(P)  AG(B)    AG(Z)  AG(F)  AG(O)    AG(U)      HPT(ESC, APOS)
        AG(C)  AG(R)  AG(S)  AG(T)  AG(G)    AG(M)  AG(N)  AG(E)    AG(I)      AG(A)
        AG(Q)  AG(J)  AG(V)  AG(D)  AG(K)    AG(X)  AG(H)  &kp DOT  &kp COMMA  &none
                   &none  SM(LSHFT, BSPC)    SM(LCTRL, SPC)  &none
      >;
    };
  };
};

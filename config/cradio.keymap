/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ALPHA 0
#define SYMBOL 1
#define NUMBER 2
#define FUNCTION 3

#include "chords.keymap"

#define LANGUAGE LS(F1)
#define SCREENSHOT LG(LS(N4))
#define LOCKSCR LG(LC(Q))
#define ALFRED LG(SPC)
#define MDASH LA(LS(MINUS))
#define ELLIPSIS LA(SEMICOLON)

#define PHT(key1, key2) &prefer_hold_tap key1 key2
#define HPT(key1, key2) &hold_prefer_tap key1 key2
#define HTB(key1, key2) &balanced_hold_tap key1 key2
/ {
    behaviors {
        hold_prefer_tap: hold_prefer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFER_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        prefer_hold_tap: prefer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "PREFER_HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
        balanced_hold_tap: balanced_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_HOLD_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
};

// Like autoshift but for gui instead
#define AG(keycode) HPT(LG(keycode), keycode)

// Sticky mod on hold
#define SM(mod, keycode) &sm mod keycode
&sk {
    release-after-ms = <2000>;
    quick-release;
};
/ {
    behaviors {
        sm: sticky_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_MOD";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&sk>, <&kp>;
        };
    };
};

// chord spc + bkspc to delete a word, or hold for a hyper sticky modifier
#define HYPER LG(LA(LCTRL))
/ {
  combos {
    compatible = "zmk,combos";
    combo_del_word {
      timeout-ms = <60>;
      bindings = <SM(HYPER, LA(BSPC))>;
      key-positions = <31 32>;
    };
  };
};

// Chord left thumb keys as left click, right thumb keys as right click
// Hold for command versions
// TODO https://github.com/zmkfirmware/zmk/pull/1430
/ {
  combos {
    compatible = "zmk,combos";
    combo_left_click {
      timeout-ms = <60>;
      bindings = <HPT(&none, &none)>;
      key-positions = <30 31>;
    };
    combo_right_click {
      timeout-ms = <60>;
      bindings = <HPT(&none, &none)>;
      key-positions = <32 33>;
    };
  };
};

// TODO: Tap to momentary switch to layer, hold to switch layer, chord to momentary switch
#define LYR(layer) &to layer

// Chord SYMBOL + NUMBER to get to FUNCTION layer
/ {
  combos {
    compatible = "zmk,combos";
    combo_function_layer {
      timeout-ms = <60>;
      bindings = <&to FUNCTION>;
      key-positions = <30 33>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    ALPHA_layer {
      bindings = <
        AG(W)  AG(L)  AG(Y)  AG(P)  AG(B)    AG(Z)  AG(F)  AG(O)          AG(U)               HPT(ESC, APOS)
        AG(C)  AG(R)  AG(S)  AG(T)  AG(G)    AG(M)  AG(N)  AG(E)          AG(I)               AG(A)
        AG(Q)  AG(J)  AG(V)  AG(D)  AG(K)    AG(X)  AG(H)  HPT(TAB, DOT)  HPT(ALFRED, COMMA)  AG(RET)
             LYR(SYMBOL)  SM(LSHFT, BSPC)    SM(LCTRL, SPC)  LYR(NUMBER)
      >;
    };

    SYMBOL_layer {
      bindings = <
        AG(GRAVE)      AG(TILDE)     AG(BACKSLASH)   AG(LEFT_BRACE)  AG(DOLLAR)      AG(PERCENT)  AG(RIGHT_BRACE)  AG(SLASH)      AG(POUND)           HPT(ESC, APOS)
        AG(AMPERSAND)  AG(ASTERISK)  AG(EQUAL)       AG(LPAR)        AG(LT)          AG(GT)       AG(RPAR)         AG(MINUS)      AG(PLUS)            AG(PIPE)
        AG(MDASH)      AG(AT)        AG(UNDERSCORE)  AG(LBKT)        AG(ELLIPSIS)    AG(CARET)    AG(RBKT)         HPT(TAB, DOT)  HPT(ALFRED, COMMA)  AG(RET)
                                                       &to ALPHA  SM(LSHFT, BSPC)    SM(LCTRL, SPC)  LYR(NUMBER)
      >;
    };

    NUMBER_layer {
      bindings = <
        &kp C_BRI_UP  AG(N7)  AG(N8)  AG(N9)  &kp SCREENSHOT    &kp C_MUTE    &kp C_PREV  &kp C_PP       &kp C_NEXT          HPT(ESC, APOS)
        &kp LANGUAGE  AG(N4)  AG(N5)  AG(N6)  AG(N0)            &kp C_VOL_UP  AG(LEFT)    AG(DOWN)       AG(UP)              AG(RIGHT)
        &kp C_BRI_DN  AG(N1)  AG(N2)  AG(N3)  &kp LOCKSCR       &kp C_VOL_DN  &none       HPT(TAB, DOT)  HPT(ALFRED, COMMA)  AG(RET)
                                  &to ALPHA  SM(LSHFT, BSPC)    SM(LCTRL, SPC)  LYR(SYMBOL)
      >;
    };

    FUNCTION_layer {
      bindings = <
        &bootloader  &none         &none         &none         &none           &none  &none  &none  &none  &bootloader
        &none        &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5  &bt BT_CLR      &none  &none  &none  &none  &none
        &none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &out OUT_TOG    &none  &none  &none  &none  &none
                                                         &to ALPHA  &none      &none  &none
      >;
    };
  };
};

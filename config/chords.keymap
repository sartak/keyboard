#define COMBO(name, keypress, keypos) \
combo_##name {                        \
  timeout-ms = <60>;                  \
  bindings = <keypress>;              \
  key-positions = <keypos>;           \
};

#define LAYER_CHORD(name, keypress, keypos, lays) \
chord_##name {                                    \
  timeout-ms = <60>;                              \
  bindings = <keypress>;                          \
  key-positions = <keypos>;                       \
  layers = <lays>;                                \
};

#define CHORD(name, keypress, keypos) \
  LAYER_CHORD(name, keypress, keypos, ALPHA SENTENCE)

/ {
  combos {
    compatible = "zmk,combos";
    LAYER_CHORD(ch_excl, &ch_excl, 17 27, SENTENCE) // e+. -> <BS>! <SKLS>
    LAYER_CHORD(ch_excl1, &kp EXCL, 17 27, ALPHA SYMBOL NUMBER) // e+. -> !
    LAYER_CHORD(ch_qmark, &ch_qmark, 18 28, SENTENCE) // i+, -> <BS>? <SKLS>
    LAYER_CHORD(ch_qmark1, &kp QMARK, 18 28, ALPHA SYMBOL NUMBER) // i+, -> ?
    LAYER_CHORD(ch_colon, &ch_colon, 19 29, SENTENCE) // a+ret -> <BS>:
    LAYER_CHORD(ch_colon1, &kp COLON, 19 29, ALPHA SYMBOL NUMBER) // a+ret -> :
    LAYER_CHORD(ch_semi, &ch_semi, 19 9, SENTENCE) // a+' -> <BS>;
    LAYER_CHORD(ch_semi1, &kp SEMI, 19 9, ALPHA SYMBOL NUMBER) // a+' -> ;
    LAYER_CHORD(ch_cent, &kp LA(N4), 10 20, SYMBOL) // c+q -> ¢
    LAYER_CHORD(ch_pound, &kp LA(N3), 11 21, SYMBOL) // r+j -> £
    LAYER_CHORD(ch_yen, &kp INT_YEN, 12 22, SYMBOL) // s+v -> ¥
    LAYER_CHORD(ch_euro, &kp LA(LS(N2)), 13 23, SYMBOL) // t+d -> €
    LAYER_CHORD(ch_mid_ell, &kp QMARK, 14 24, SYMBOL) // g+k -> ⋯
    LAYER_CHORD(ch_bullet, &kp LA(N8), 3 13, SYMBOL) // p+t -> •
    LAYER_CHORD(ch_degrees, &kp LA(LS(N8)), 2 12, SYMBOL) // y+s -> °
    LAYER_CHORD(ch_infinit, &kp LA(N5), 0 10, SYMBOL) // w+c -> ∞
    LAYER_CHORD(ch_checkma, &kp QMARK, 15 25, SYMBOL) // m+x -> ✔
    LAYER_CHORD(ch_ballot_, &kp QMARK, 16 26, SYMBOL) // n+h -> ✗
    LAYER_CHORD(ch_left_ar, &kp QMARK, 5 15, SYMBOL) // z+m -> ←
    LAYER_CHORD(ch_down_ar, &kp QMARK, 6 16, SYMBOL) // f+n -> ↓
    LAYER_CHORD(ch_up_arro, &kp QMARK, 7 17, SYMBOL) // o+e -> ↑
    LAYER_CHORD(ch_right_a, &kp QMARK, 8 18, SYMBOL) // u+i -> →
    CHORD(ch_bs_ing, &ch_bs_ing, 18 16 14) // i+n+g -> <BS>ing
    CHORD(ch_bs_n_t, &ch_bs_n_t, 16 9 13) // n+'+t -> <BS>n't
    CHORD(ch_bs_ve, &ch_bs_ve, 9 22 17) // '+v+e -> <BS>'ve
    CHORD(ch_bs_re, &ch_bs_re, 9 11 17) // '+r+e -> <BS>'re
    CHORD(ch_the, &ch_the, 13 26 17) // t+h+e -> the
    CHORD(ch_be, &ch_be, 4 17 32) // b+e+space -> be
    CHORD(ch_of, &ch_of, 7 6 32) // o+f+space -> of
    CHORD(ch_and, &ch_and, 19 16 23) // a+n+d -> and
    CHORD(ch_a, &ch_a, 19 32) // a+space -> a
    CHORD(ch_a1, &ch_a1, 19 31) // a+bksp -> A
    CHORD(ch_to, &ch_to, 13 7 32) // t+o+space -> to
    CHORD(ch_in, &ch_in, 18 16 32) // i+n+space -> in
    CHORD(ch_he, &ch_he, 26 17 32) // h+e+space -> he
    CHORD(ch_have, &ch_have, 26 19 22) // h+a+v -> have
    CHORD(ch_it, &ch_it, 18 13 32) // i+t+space -> it
    CHORD(ch_that, &ch_that, 13 26 19) // t+h+a -> that
    CHORD(ch_for, &ch_for, 6 7 11) // f+o+r -> for
    CHORD(ch_they, &ch_they, 13 26 2) // t+h+y -> they
    CHORD(ch_i, &ch_i, 18 32) // i+space -> I
    CHORD(ch_with, &ch_with, 0 18 26) // w+i+h -> with
    CHORD(ch_as, &ch_as, 19 12 32) // a+s+space -> as
    CHORD(ch_not, &ch_not, 16 7 13) // n+o+t -> not
    CHORD(ch_on, &ch_on, 7 16 32) // o+n+space -> on
    CHORD(ch_she, &ch_she, 12 26 17) // s+h+e -> she
    CHORD(ch_at, &ch_at, 19 13 32) // a+t+space -> at
    CHORD(ch_by, &ch_by, 4 2 32) // b+y+space -> by
    CHORD(ch_this, &ch_this, 13 26 12) // t+h+s -> this
    CHORD(ch_we, &ch_we, 0 17 32) // w+e+space -> we
    CHORD(ch_you, &ch_you, 2 7 8) // y+o+u -> you
    CHORD(ch_do, &ch_do, 23 7 32) // d+o+space -> do
    CHORD(ch_but, &ch_but, 18 8 13) // i+u+t -> but
    CHORD(ch_from, &ch_from, 11 7 15) // r+o+m -> from
    CHORD(ch_or, &ch_or, 7 11 32) // o+r+space -> or
    CHORD(ch_which, &ch_which, 26 18 10) // h+i+c -> which
    CHORD(ch_one, &ch_one, 7 16 17) // o+n+e -> one
    CHORD(ch_would, &ch_would, 0 7 8) // w+o+u -> would
    CHORD(ch_all, &ch_all, 19 1 25) // a+l+x -> all
    CHORD(ch_will, &ch_will, 0 18 1) // w+i+l -> will
    CHORD(ch_there, &ch_there, 13 26 11) // t+h+r -> there
    CHORD(ch_say, &ch_say, 12 19 2) // s+a+y -> say
    CHORD(ch_who, &ch_who, 0 26 7) // w+h+o -> who
    CHORD(ch_make, &ch_make, 15 19 24) // m+a+k -> make
    CHORD(ch_when, &ch_when, 0 26 17) // w+h+e -> when
    CHORD(ch_can, &ch_can, 10 19 16) // c+a+n -> can
    CHORD(ch_more, &ch_more, 15 11 17) // m+r+e -> more
    CHORD(ch_if, &ch_if, 18 6 32) // i+f+space -> if
    CHORD(ch_no, &ch_no, 16 17 32) // n+e+space -> no
    CHORD(ch_man, &ch_man, 24 19 16) // k+a+n -> man
    CHORD(ch_out, &ch_out, 7 8 13) // o+u+t -> out
    CHORD(ch_other, &ch_other, 7 13 11) // o+t+r -> other
    CHORD(ch_so, &ch_so, 12 7 32) // s+o+space -> so
    CHORD(ch_what, &ch_what, 0 26 13) // w+h+t -> what
    CHORD(ch_time, &ch_time, 13 15 17) // t+m+e -> time
    CHORD(ch_up, &ch_up, 8 3 32) // u+p+space -> up
    CHORD(ch_go, &ch_go, 14 7 32) // g+o+space -> go
    CHORD(ch_about, &ch_about, 4 7 8) // b+o+u -> about
    CHORD(ch_than, &ch_than, 13 19 16) // t+a+n -> than
    CHORD(ch_into, &ch_into, 18 16 7) // i+n+o -> into
    CHORD(ch_could, &ch_could, 10 7 8) // c+o+u -> could
    CHORD(ch_state, &ch_state, 12 13 19) // s+t+a -> state
    CHORD(ch_only, &ch_only, 7 1 2) // o+l+y -> only
    CHORD(ch_new, &ch_new, 16 17 0) // n+e+w -> new
    CHORD(ch_year, &ch_year, 2 17 19) // y+e+a -> year
    CHORD(ch_some, &ch_some, 12 7 15) // s+o+m -> some
    CHORD(ch_take, &ch_take, 19 24 17) // a+k+e -> take
    CHORD(ch_come, &ch_come, 10 7 15) // c+o+m -> come
    CHORD(ch_these, &ch_these, 16 26 12) // n+h+s -> these
    CHORD(ch_know, &ch_know, 24 16 7) // k+n+o -> know
    CHORD(ch_see, &ch_see, 12 17 24) // s+e+k -> see
    CHORD(ch_use, &ch_use, 8 12 17) // u+s+e -> use
    CHORD(ch_get, &ch_get, 14 17 13) // g+e+t -> get
    CHORD(ch_like, &ch_like, 1 18 24) // l+i+k -> like
    CHORD(ch_then, &ch_then, 13 17 16) // t+e+n -> then
    CHORD(ch_first, &ch_first, 6 11 12) // f+r+s -> first
    CHORD(ch_any, &ch_any, 19 16 2) // a+n+y -> any
    CHORD(ch_work, &ch_work, 7 11 24) // o+r+k -> work
    CHORD(ch_now, &ch_now, 16 7 0) // n+o+w -> now
    CHORD(ch_may, &ch_may, 15 19 2) // m+a+y -> may
    CHORD(ch_such, &ch_such, 12 10 26) // s+c+h -> such
    CHORD(ch_give, &ch_give, 14 18 22) // g+i+v -> give
    CHORD(ch_over, &ch_over, 7 22 11) // o+v+r -> over
    CHORD(ch_think, &ch_think, 26 18 24) // h+i+k -> think
    CHORD(ch_most, &ch_most, 15 7 13) // m+o+t -> most
    CHORD(ch_even, &ch_even, 17 22 16) // e+v+n -> even
    CHORD(ch_find, &ch_find, 6 18 23) // f+i+d -> find
    CHORD(ch_day, &ch_day, 23 19 2) // d+a+y -> day
    CHORD(ch_also, &ch_also, 19 1 7) // a+l+o -> also
    CHORD(ch_after, &ch_after, 6 13 11) // f+t+r -> after
    CHORD(ch_way, &ch_way, 0 19 2) // w+a+y -> way
    CHORD(ch_many, &ch_many, 15 16 2) // m+n+y -> many
    CHORD(ch_must, &ch_must, 15 8 13) // m+u+t -> must
    CHORD(ch_look, &ch_look, 1 7 24) // l+o+k -> look
    CHORD(ch_before, &ch_before, 4 6 7) // b+f+o -> before
    CHORD(ch_great, &ch_great, 14 11 17) // g+r+e -> great
    CHORD(ch_back, &ch_back, 4 19 10) // b+a+c -> back
    CHORD(ch_through, &ch_through, 26 11 14) // h+r+g -> through
    CHORD(ch_long, &ch_long, 1 7 16) // l+o+n -> long
    CHORD(ch_where, &ch_where, 0 26 11) // w+h+r -> where
    CHORD(ch_much, &ch_much, 15 8 10) // m+u+c -> much
    CHORD(ch_should, &ch_should, 12 7 8) // s+o+u -> should
    CHORD(ch_well, &ch_well, 0 17 1) // w+e+l -> well
    CHORD(ch_people, &ch_people, 3 17 1) // p+e+l -> people
    CHORD(ch_down, &ch_down, 23 0 16) // d+w+n -> down
    CHORD(ch_own, &ch_own, 7 0 6) // o+w+f -> own
    CHORD(ch_just, &ch_just, 8 12 13) // u+s+t -> just
    CHORD(ch_because, &ch_because, 4 17 19) // b+e+a -> because
    CHORD(ch_good, &ch_good, 22 7 23) // v+o+d -> good
    CHORD(ch_each, &ch_each, 19 10 26) // a+c+h -> each
    CHORD(ch_those, &ch_those, 13 7 12) // t+o+s -> those
    CHORD(ch_feel, &ch_feel, 6 17 1) // f+e+l -> feel
    CHORD(ch_seem, &ch_seem, 12 17 15) // s+e+m -> seem
    CHORD(ch_how, &ch_how, 26 7 8) // h+o+u -> how
    CHORD(ch_high, &ch_high, 26 18 14) // h+i+g -> high
    CHORD(ch_too, &ch_too, 13 7 6) // t+o+f -> too
    CHORD(ch_place, &ch_place, 3 10 17) // p+c+e -> place
    CHORD(ch_little, &ch_little, 1 18 13) // l+i+t -> little
    CHORD(ch_world, &ch_world, 0 1 23) // w+l+d -> world
    CHORD(ch_very, &ch_very, 22 17 11) // v+e+r -> very
    CHORD(ch_still, &ch_still, 12 13 1) // s+t+l -> still
    CHORD(ch_nation, &ch_nation, 16 19 18) // n+a+i -> nation
    CHORD(ch_hand, &ch_hand, 26 16 23) // h+n+d -> hand
    CHORD(ch_old, &ch_old, 7 1 23) // o+l+d -> old
    CHORD(ch_life, &ch_life, 1 18 6) // l+i+f -> life
    CHORD(ch_tell, &ch_tell, 13 17 1) // t+e+l -> tell
    CHORD(ch_write, &ch_write, 11 18 17) // r+i+e -> write
    CHORD(ch_become, &ch_become, 10 15 17) // c+m+e -> become
    CHORD(ch_here, &ch_here, 21 26 17) // j+h+e -> here
    CHORD(ch_show, &ch_show, 12 26 0) // s+h+w -> show
    CHORD(ch_house, &ch_house, 26 7 12) // h+o+s -> house
    CHORD(ch_both, &ch_both, 4 7 26) // b+o+h -> both
    CHORD(ch_between, &ch_between, 4 17 16) // b+e+n -> between
    CHORD(ch_need, &ch_need, 13 16 23) // t+n+d -> need
    CHORD(ch_mean, &ch_mean, 15 17 19) // m+e+a -> mean
    CHORD(ch_call, &ch_call, 10 19 1) // c+a+l -> call
    CHORD(ch_develop, &ch_develop, 23 17 22) // d+e+v -> develop
    CHORD(ch_under, &ch_under, 8 16 23) // u+n+d -> under
    CHORD(ch_last, &ch_last, 1 19 12) // l+a+s -> last
    CHORD(ch_right, &ch_right, 11 18 13) // r+i+t -> right
    CHORD(ch_move, &ch_move, 15 22 17) // m+v+e -> move
    CHORD(ch_thing, &ch_thing, 13 18 16) // t+i+n -> thing
    CHORD(ch_general, &ch_general, 14 17 16) // g+e+n -> general
    CHORD(ch_school, &ch_school, 12 26 1) // s+h+l -> school
    CHORD(ch_never, &ch_never, 16 22 11) // n+v+r -> never
    CHORD(ch_same, &ch_same, 12 19 15) // s+a+m -> same
    CHORD(ch_another, &ch_another, 19 26 11) // a+h+r -> another
    CHORD(ch_begin, &ch_begin, 17 14 18) // e+g+i -> begin
    CHORD(ch_while, &ch_while, 26 18 17) // h+i+e -> while
    CHORD(ch_number, &ch_number, 16 17 11) // n+e+r -> number
    CHORD(ch_part, &ch_part, 3 19 11) // p+a+r -> part
    CHORD(ch_turn, &ch_turn, 13 8 16) // t+u+n -> turn
    CHORD(ch_real, &ch_real, 17 19 1) // e+a+l -> real
    CHORD(ch_leave, &ch_leave, 17 19 22) // e+a+v -> leave
    CHORD(ch_might, &ch_might, 15 18 13) // m+i+t -> might
    CHORD(ch_want, &ch_want, 0 19 13) // w+a+t -> want
    CHORD(ch_point, &ch_point, 3 7 18) // p+o+i -> point
    CHORD(ch_form, &ch_form, 5 7 11) // z+o+r -> form
    CHORD(ch_off, &ch_off, 7 6 24) // o+f+k -> off
    CHORD(ch_child, &ch_child, 10 18 23) // c+i+d -> child
    CHORD(ch_few, &ch_few, 6 17 0) // f+e+w -> few
    CHORD(ch_small, &ch_small, 15 19 1) // m+a+l -> small
    CHORD(ch_since, &ch_since, 12 18 17) // s+i+e -> since
    CHORD(ch_against, &ch_against, 19 14 16) // a+g+n -> against
    CHORD(ch_ask, &ch_ask, 19 12 24) // a+s+k -> ask
    CHORD(ch_late, &ch_late, 1 19 13) // l+a+t -> late
    CHORD(ch_home, &ch_home, 14 15 17) // g+m+e -> home
    CHORD(ch_interes, &ch_interes, 18 16 11) // i+n+r -> interest
    CHORD(ch_large, &ch_large, 19 11 14) // a+r+g -> large
    CHORD(ch_person, &ch_person, 3 12 16) // p+s+n -> person
    CHORD(ch_end, &ch_end, 17 16 23) // e+n+d -> end
    CHORD(ch_open, &ch_open, 7 3 16) // o+p+n -> open
    CHORD(ch_public, &ch_public, 3 1 18) // p+l+i -> public
    CHORD(ch_follow, &ch_follow, 6 7 1) // f+o+l -> follow
    CHORD(ch_during, &ch_during, 23 11 16) // d+r+n -> during
    CHORD(ch_present, &ch_present, 11 16 13) // r+n+t -> present
    CHORD(ch_without, &ch_without, 18 13 7) // i+t+o -> without
    CHORD(ch_again, &ch_again, 19 14 18) // a+g+i -> again
    CHORD(ch_hold, &ch_hold, 26 7 23) // h+o+d -> hold
    CHORD(ch_govern, &ch_govern, 14 11 16) // g+r+n -> govern
    CHORD(ch_around, &ch_around, 19 11 23) // a+r+d -> around
    CHORD(ch_possibl, &ch_possibl, 3 12 17) // p+s+e -> possible
    CHORD(ch_head, &ch_head, 26 17 23) // h+e+d -> head
    CHORD(ch_conside, &ch_conside, 10 16 23) // c+n+d -> consider
    CHORD(ch_word, &ch_word, 0 11 23) // w+r+d -> word
    CHORD(ch_program, &ch_program, 11 14 15) // r+g+m -> program
    CHORD(ch_problem, &ch_problem, 1 17 15) // l+e+m -> problem
    CHORD(ch_however, &ch_however, 26 17 22) // h+e+v -> however
    CHORD(ch_lead, &ch_lead, 17 19 23) // e+a+d -> lead
    CHORD(ch_system, &ch_system, 12 13 15) // s+t+m -> system
    CHORD(ch_set, &ch_set, 12 17 13) // s+e+t -> set
    CHORD(ch_order, &ch_order, 7 11 23) // o+r+d -> order
    CHORD(ch_eye, &ch_eye, 17 2 25) // e+y+x -> eye
    CHORD(ch_plan, &ch_plan, 3 1 16) // p+l+n -> plan
    CHORD(ch_run, &ch_run, 11 8 16) // r+u+n -> run
    CHORD(ch_keep, &ch_keep, 24 17 25) // k+e+x -> keep
    CHORD(ch_face, &ch_face, 6 19 10) // f+a+c -> face
    CHORD(ch_fact, &ch_fact, 6 10 13) // f+c+t -> fact
    CHORD(ch_group, &ch_group, 14 7 8) // g+o+u -> group
    CHORD(ch_play, &ch_play, 3 1 2) // p+l+y -> play
    CHORD(ch_stand, &ch_stand, 12 16 23) // s+n+d -> stand
    CHORD(ch_increas, &ch_increas, 18 16 10) // i+n+c -> increase
    CHORD(ch_early, &ch_early, 17 1 2) // e+l+y -> early
    CHORD(ch_course, &ch_course, 7 11 12) // o+r+s -> course
    CHORD(ch_change, &ch_change, 10 26 17) // c+h+e -> change
    CHORD(ch_help, &ch_help, 26 1 3) // h+l+p -> help
    CHORD(ch_line, &ch_line, 1 16 17) // l+n+e -> line
    CHORD(ch_his, &ch_his, 26 18 12) // h+i+s -> his
    CHORD(ch_her, &ch_her, 26 17 11) // h+e+r -> her
    CHORD(ch_an, &ch_an, 19 16 32) // a+n+space -> an
    CHORD(ch_my, &ch_my, 15 2 32) // m+y+space -> my
    CHORD(ch_their, &ch_their, 26 18 11) // h+i+r -> their
    CHORD(ch_me, &ch_me, 15 17 32) // m+e+space -> me
    CHORD(ch_him, &ch_him, 4 18 15) // b+i+m -> him
    CHORD(ch_your, &ch_your, 2 7 11) // y+o+r -> your
    CHORD(ch_its, &ch_its, 18 13 12) // i+t+s -> its
    CHORD(ch_two, &ch_two, 13 0 7) // t+w+o -> two
    CHORD(ch_our, &ch_our, 7 8 11) // o+u+r -> our
    CHORD(ch_us, &ch_us, 8 12 32) // u+s+space -> us
    CHORD(ch_is, &ch_is, 18 12 32) // i+s+space -> is
    CHORD(ch_was, &ch_was, 0 19 12) // w+a+s -> was
    CHORD(ch_are, &ch_are, 19 11 17) // a+r+e -> are
    CHORD(ch_had, &ch_had, 26 19 23) // h+a+d -> had
    CHORD(ch_were, &ch_were, 0 17 11) // w+e+r -> were
    CHORD(ch_said, &ch_said, 12 19 18) // s+a+i -> said
    CHORD(ch_has, &ch_has, 26 19 12) // h+a+s -> has
    CHORD(ch_sound, &ch_sound, 12 8 23) // s+u+d -> sound
    CHORD(ch_water, &ch_water, 0 13 11) // w+t+r -> water
    CHORD(ch_side, &ch_side, 12 18 23) // s+i+d -> side
    CHORD(ch_made, &ch_made, 15 23 17) // m+d+e -> made
    CHORD(ch_live, &ch_live, 1 18 22) // l+i+v -> live
    CHORD(ch_round, &ch_round, 7 8 23) // o+u+d -> round
    CHORD(ch_came, &ch_came, 10 19 15) // c+a+m -> came
    CHORD(ch_every, &ch_every, 17 11 2) // e+r+y -> every
    CHORD(ch_name, &ch_name, 16 19 17) // n+a+e -> name
    CHORD(ch_sentenc, &ch_sentenc, 12 17 16) // s+e+n -> sentence
    CHORD(ch_low, &ch_low, 1 7 0) // l+o+w -> low
    CHORD(ch_differ, &ch_differ, 23 6 11) // d+f+r -> differ
    CHORD(ch_cause, &ch_cause, 10 19 12) // c+a+s -> cause
    CHORD(ch_boy, &ch_boy, 4 7 2) // b+o+y -> boy
    CHORD(ch_does, &ch_does, 23 17 12) // d+e+s -> does
    CHORD(ch_air, &ch_air, 19 18 11) // a+i+r -> air
    CHORD(ch_put, &ch_put, 3 8 13) // p+u+t -> put
    CHORD(ch_port, &ch_port, 3 7 11) // p+o+r -> port
    CHORD(ch_spell, &ch_spell, 12 3 1) // s+p+l -> spell
    CHORD(ch_land, &ch_land, 1 16 23) // l+n+d -> land
    CHORD(ch_big, &ch_big, 4 18 14) // b+i+g -> big
    CHORD(ch_act, &ch_act, 19 10 13) // a+c+t -> act
    CHORD(ch_why, &ch_why, 0 26 2) // w+h+y -> why
    CHORD(ch_men, &ch_men, 15 17 16) // m+e+n -> men
    CHORD(ch_went, &ch_went, 0 16 13) // w+n+t -> went
    CHORD(ch_light, &ch_light, 1 18 14) // l+i+g -> light
    CHORD(ch_kind, &ch_kind, 18 16 23) // i+n+d -> kind
    CHORD(ch_picture, &ch_picture, 3 18 10) // p+i+c -> picture
    CHORD(ch_try, &ch_try, 13 11 2) // t+r+y -> try
    CHORD(ch_animal, &ch_animal, 19 16 1) // a+n+l -> animal
    CHORD(ch_mother, &ch_mother, 15 13 11) // m+t+r -> mother
    CHORD(ch_build, &ch_build, 4 8 1) // b+u+l -> build
    CHORD(ch_self, &ch_self, 12 1 6) // s+l+f -> self
    CHORD(ch_earth, &ch_earth, 17 19 26) // e+a+h -> earth
    CHORD(ch_father, &ch_father, 6 19 17) // f+a+e -> father
    CHORD(ch_page, &ch_page, 3 19 17) // p+a+e -> page
    CHORD(ch_country, &ch_country, 10 8 2) // c+u+y -> country
    CHORD(ch_found, &ch_found, 6 8 23) // f+u+d -> found
    CHORD(ch_answer, &ch_answer, 19 16 12) // a+n+s -> answer
    CHORD(ch_grow, &ch_grow, 14 11 0) // g+r+w -> grow
    CHORD(ch_study, &ch_study, 13 8 2) // t+u+y -> study
    CHORD(ch_learn, &ch_learn, 1 17 11) // l+e+r -> learn
    CHORD(ch_plant, &ch_plant, 3 1 13) // p+l+t -> plant
    CHORD(ch_cover, &ch_cover, 10 7 22) // c+o+v -> cover
    CHORD(ch_food, &ch_food, 6 7 23) // f+o+d -> food
    CHORD(ch_sun, &ch_sun, 12 8 16) // s+u+n -> sun
    CHORD(ch_four, &ch_four, 6 7 8) // f+o+u -> four
    CHORD(ch_thought, &ch_thought, 13 26 8) // t+h+u -> thought
    CHORD(ch_city, &ch_city, 10 13 2) // c+t+y -> city
    CHORD(ch_cross, &ch_cross, 10 11 12) // c+r+s -> cross
    CHORD(ch_hard, &ch_hard, 26 11 23) // h+r+d -> hard
    CHORD(ch_far, &ch_far, 6 19 11) // f+a+r -> far
    CHORD(ch_sea, &ch_sea, 12 17 19) // s+e+a -> sea
    CHORD(ch_draw, &ch_draw, 23 19 0) // d+a+w -> draw
    CHORD(ch_left, &ch_left, 1 6 13) // l+f+t -> left
    CHORD(ch_press, &ch_press, 3 11 12) // p+r+s -> press
    CHORD(ch_close, &ch_close, 10 7 12) // c+o+s -> close
    CHORD(ch_night, &ch_night, 16 14 26) // n+g+h -> night
    CHORD(ch_north, &ch_north, 16 11 26) // n+r+h -> north
    CHORD(ch_togethe, &ch_togethe, 7 14 26) // o+g+h -> together
    CHORD(ch_next, &ch_next, 17 25 13) // e+x+t -> next
    CHORD(ch_white, &ch_white, 0 18 17) // w+i+e -> white
    CHORD(ch_childre, &ch_childre, 26 18 23) // h+i+d -> children
    CHORD(ch_got, &ch_got, 14 7 13) // g+o+t -> got
    CHORD(ch_walk, &ch_walk, 19 1 24) // a+l+k -> walk
    CHORD(ch_example, &ch_example, 15 3 1) // m+p+l -> example
    CHORD(ch_always, &ch_always, 1 0 2) // l+w+y -> always
    CHORD(ch_music, &ch_music, 15 12 10) // m+s+c -> music
    CHORD(ch_mark, &ch_mark, 15 11 24) // m+r+k -> mark
    CHORD(ch_often, &ch_often, 7 13 17) // o+t+e -> often
    CHORD(ch_letter, &ch_letter, 1 13 11) // l+t+r -> letter
    CHORD(ch_until, &ch_until, 16 13 1) // n+t+l -> until
    CHORD(ch_mile, &ch_mile, 15 18 17) // m+i+e -> mile
    CHORD(ch_river, &ch_river, 11 18 22) // r+i+v -> river
    CHORD(ch_car, &ch_car, 10 19 11) // c+a+r -> car
    CHORD(ch_feet, &ch_feet, 6 17 13) // f+e+t -> feet
    CHORD(ch_care, &ch_care, 10 11 17) // c+r+e -> care
    CHORD(ch_second, &ch_second, 12 17 10) // s+e+c -> second
    CHORD(ch_carry, &ch_carry, 10 19 2) // c+a+y -> carry
    CHORD(ch_science, &ch_science, 12 10 18) // s+c+i -> science
    CHORD(ch_eat, &ch_eat, 17 19 13) // e+a+t -> eat
    CHORD(ch_friend, &ch_friend, 11 18 23) // r+i+d -> friend
    CHORD(ch_began, &ch_began, 4 14 16) // b+g+n -> began
    CHORD(ch_idea, &ch_idea, 18 23 19) // i+d+a -> idea
    CHORD(ch_fish, &ch_fish, 6 18 12) // f+i+s -> fish
    CHORD(ch_mountai, &ch_mountai, 7 19 13) // o+a+t -> mountain
    CHORD(ch_stop, &ch_stop, 12 13 3) // s+t+p -> stop
    CHORD(ch_once, &ch_once, 16 10 17) // n+c+e -> once
    CHORD(ch_base, &ch_base, 4 19 12) // b+a+s -> base
    CHORD(ch_horse, &ch_horse, 26 11 12) // h+r+s -> horse
    CHORD(ch_cut, &ch_cut, 10 8 13) // c+u+t -> cut
    CHORD(ch_sure, &ch_sure, 12 8 11) // s+u+r -> sure
    CHORD(ch_red, &ch_red, 11 17 23) // r+e+d -> red
    CHORD(ch_class, &ch_class, 10 1 12) // c+l+s -> class
    CHORD(ch_true, &ch_true, 13 11 8) // t+r+u -> true
    CHORD(ch_six, &ch_six, 12 18 25) // s+i+x -> six
    CHORD(ch_war, &ch_war, 0 19 11) // w+a+r -> war
    CHORD(ch_lay, &ch_lay, 1 19 2) // l+a+y -> lay
    CHORD(ch_map, &ch_map, 15 19 3) // m+a+p -> map
    CHORD(ch_fly, &ch_fly, 6 1 2) // f+l+y -> fly
    CHORD(ch_cry, &ch_cry, 10 11 2) // c+r+y -> cry
    CHORD(ch_box, &ch_box, 4 7 25) // b+o+x -> box
    CHORD(ch_noun, &ch_noun, 16 7 8) // n+o+u -> noun
    CHORD(ch_oh, &ch_oh, 7 26 32) // o+h+space -> oh
    CHORD(ch_free, &ch_free, 6 11 17) // f+r+e -> free
    CHORD(ch_dry, &ch_dry, 23 11 2) // d+r+y -> dry
    CHORD(ch_ago, &ch_ago, 19 14 7) // a+g+o -> ago
    CHORD(ch_ran, &ch_ran, 11 19 16) // r+a+n -> ran
    CHORD(ch_hot, &ch_hot, 26 7 13) // h+o+t -> hot
    CHORD(ch_yet, &ch_yet, 2 17 13) // y+e+t -> yet
    CHORD(ch_am, &ch_am, 19 15 32) // a+m+space -> am
    CHORD(ch_arm, &ch_arm, 19 11 15) // a+r+m -> arm
    CHORD(ch_ice, &ch_ice, 18 10 17) // i+c+e -> ice
    CHORD(ch_matter, &ch_matter, 15 19 13) // m+a+t -> matter
    CHORD(ch_art, &ch_art, 19 11 13) // a+r+t -> art
    CHORD(ch_cell, &ch_cell, 10 17 1) // c+e+l -> cell
    CHORD(ch_leg, &ch_leg, 1 17 14) // l+e+g -> leg
    CHORD(ch_joy, &ch_joy, 21 7 2) // j+o+y -> joy
    CHORD(ch_job, &ch_job, 21 7 4) // j+o+b -> job
    CHORD(ch_gas, &ch_gas, 14 19 12) // g+a+s -> gas
    CHORD(ch_buy, &ch_buy, 4 8 2) // b+u+y -> buy
    CHORD(ch_hill, &ch_hill, 26 18 1) // h+i+l -> hill
    CHORD(ch_law, &ch_law, 1 19 0) // l+a+w -> law
    CHORD(ch_lie, &ch_lie, 1 18 17) // l+i+e -> lie
    CHORD(ch_son, &ch_son, 12 7 16) // s+o+n -> son
    CHORD(ch_pay, &ch_pay, 3 19 2) // p+a+y -> pay
    CHORD(ch_age, &ch_age, 19 14 17) // a+g+e -> age
    CHORD(ch_cool, &ch_cool, 10 7 1) // c+o+l -> cool
    CHORD(ch_lot, &ch_lot, 1 7 13) // l+o+t -> lot
    CHORD(ch_key, &ch_key, 24 17 2) // k+e+y -> key
    CHORD(ch_row, &ch_row, 11 7 0) // r+o+w -> row
    CHORD(ch_die, &ch_die, 23 18 17) // d+i+e -> die
    CHORD(ch_oil, &ch_oil, 7 18 1) // o+i+l -> oil
    CHORD(ch_fit, &ch_fit, 6 18 13) // f+i+t -> fit
    CHORD(ch_hit, &ch_hit, 26 18 13) // h+i+t -> hit
    CHORD(ch_rub, &ch_rub, 11 8 4) // r+u+b -> rub
    CHORD(ch_tie, &ch_tie, 13 18 17) // t+i+e -> tie
    CHORD(ch_gun, &ch_gun, 14 8 16) // g+u+n -> gun
    CHORD(ch_nine, &ch_nine, 16 18 17) // n+i+e -> nine
    CHORD(ch_thank, &ch_thank, 26 19 24) // h+a+k -> thank
    CHORD(ch_experie, &ch_experie, 17 25 3) // e+x+p -> experience
    CHORD(ch_led, &ch_led, 1 17 23) // l+e+d -> led
    CHORD(ch_win, &ch_win, 0 18 16) // w+i+n -> win
    CHORD(ch_feed, &ch_feed, 6 17 23) // f+e+d -> feed
    CHORD(ch_nor, &ch_nor, 16 7 11) // n+o+r -> nor
    CHORD(ch_fat, &ch_fat, 6 19 13) // f+a+t -> fat
    CHORD(ch_bar, &ch_bar, 4 19 11) // b+a+r -> bar
    CHORD(ch_log, &ch_log, 1 7 14) // l+o+g -> log
    CHORD(ch_hey, &ch_hey, 26 17 2) // h+e+y -> hey
    CHORD(ch_return, &ch_return, 11 17 13) // r+e+t -> return
    CHORD(ch_probabl, &ch_probabl, 3 4 1 2) // p+b+l+y -> probably
    CHORD(ch_thank_y, &ch_thank_y, 13 19 2) // t+a+y -> thank you
    CHORD(ch_thanks, &ch_thanks, 13 16 12) // t+n+s -> thanks
    CHORD(ch_i_ve, &ch_i_ve, 18 22 17) // i+v+e -> I've
    CHORD(ch_per, &ch_per, 3 17 11) // p+e+r -> per
    CHORD(ch_null, &ch_null, 16 8 1) // n+u+l -> null
    CHORD(ch_nil, &ch_nil, 16 18 1) // n+i+l -> nil
    CHORD(ch_array, &ch_array, 19 11 2) // a+r+y -> array
    CHORD(ch_the_qui, &ch_the_qui, 4 20 25 9) // b+q+x+' -> the quick brown fox jumps over the lazy dog
    CHORD(ch_elberet, &ch_elberet, 17 1 4 26) // e+l+b+h -> Elbereth
    CHORD(ch_shawn, &ch_shawn, 26 19 16) // h+a+n -> Shawn
    CHORD(ch_moore, &ch_moore, 7 11 17) // o+r+e -> Moore
    CHORD(ch_sartak, &ch_sartak, 12 19 11) // s+a+r -> sartak
    CHORD(ch_sartak_, &ch_sartak_, 12 11 27) // s+r+. -> sartak.org
    CHORD(ch_shawn_d, &ch_shawn_d, 26 16 27) // h+n+. -> shawn.dev
    CHORD(ch_somervi, &ch_somervi, 12 17 22) // s+e+v -> Somerville
    CHORD(ch_, &ch_, 0 13 1)
  };
};

#define MACRO(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>;                  \
};

#define CHMAC(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>, <&to SENTENCE>;  \
};
/ {
  macros {
    CHMAC(ch_excl, &kp BSPC &kp EXCL &kp SPC &sk LSHFT) // e+. -> <BS>! <SKLS>
    CHMAC(ch_qmark, &kp BSPC &kp QMARK &kp SPC &sk LSHFT) // i+, -> <BS>? <SKLS>
    CHMAC(ch_colon, &kp BSPC &kp COLON &kp SPC) // a+ret -> <BS>:
    CHMAC(ch_semi, &kp BSPC &kp SEMI &kp SPC) // a+' -> <BS>;
    CHMAC(ch_bs_ing, &kp BSPC &kp I &kp N &kp G &kp SPC) // i+n+g -> <BS>ing
    CHMAC(ch_bs_n_t, &kp BSPC &kp N &kp APOS &kp T &kp SPC) // n+'+t -> <BS>n't
    CHMAC(ch_bs_ve, &kp BSPC &kp APOS &kp V &kp E &kp SPC) // '+v+e -> <BS>'ve
    CHMAC(ch_bs_re, &kp BSPC &kp APOS &kp R &kp E &kp SPC) // '+r+e -> <BS>'re
    CHMAC(ch_the, &kp T &kp H &kp E &kp SPC) // t+h+e -> the
    CHMAC(ch_be, &kp B &kp E &kp SPC) // b+e+space -> be
    CHMAC(ch_of, &kp O &kp F &kp SPC) // o+f+space -> of
    CHMAC(ch_and, &kp A &kp N &kp D &kp SPC) // a+n+d -> and
    CHMAC(ch_a, &kp A &kp SPC) // a+space -> a
    CHMAC(ch_a1, &kp LS(A) &kp SPC) // a+bksp -> A
    CHMAC(ch_to, &kp T &kp O &kp SPC) // t+o+space -> to
    CHMAC(ch_in, &kp I &kp N &kp SPC) // i+n+space -> in
    CHMAC(ch_he, &kp H &kp E &kp SPC) // h+e+space -> he
    CHMAC(ch_have, &kp H &kp A &kp V &kp E &kp SPC) // h+a+v -> have
    CHMAC(ch_it, &kp I &kp T &kp SPC) // i+t+space -> it
    CHMAC(ch_that, &kp T &kp H &kp A &kp T &kp SPC) // t+h+a -> that
    CHMAC(ch_for, &kp F &kp O &kp R &kp SPC) // f+o+r -> for
    CHMAC(ch_they, &kp T &kp H &kp E &kp Y &kp SPC) // t+h+y -> they
    CHMAC(ch_i, &kp LS(I) &kp SPC) // i+space -> I
    CHMAC(ch_with, &kp W &kp I &kp T &kp H &kp SPC) // w+i+h -> with
    CHMAC(ch_as, &kp A &kp S &kp SPC) // a+s+space -> as
    CHMAC(ch_not, &kp N &kp O &kp T &kp SPC) // n+o+t -> not
    CHMAC(ch_on, &kp O &kp N &kp SPC) // o+n+space -> on
    CHMAC(ch_she, &kp S &kp H &kp E &kp SPC) // s+h+e -> she
    CHMAC(ch_at, &kp A &kp T &kp SPC) // a+t+space -> at
    CHMAC(ch_by, &kp B &kp Y &kp SPC) // b+y+space -> by
    CHMAC(ch_this, &kp T &kp H &kp I &kp S &kp SPC) // t+h+s -> this
    CHMAC(ch_we, &kp W &kp E &kp SPC) // w+e+space -> we
    CHMAC(ch_you, &kp Y &kp O &kp U &kp SPC) // y+o+u -> you
    CHMAC(ch_do, &kp D &kp O &kp SPC) // d+o+space -> do
    CHMAC(ch_but, &kp B &kp U &kp T &kp SPC) // i+u+t -> but
    CHMAC(ch_from, &kp F &kp R &kp O &kp M &kp SPC) // r+o+m -> from
    CHMAC(ch_or, &kp O &kp R &kp SPC) // o+r+space -> or
    CHMAC(ch_which, &kp W &kp H &kp I &kp C &kp H &kp SPC) // h+i+c -> which
    CHMAC(ch_one, &kp O &kp N &kp E &kp SPC) // o+n+e -> one
    CHMAC(ch_would, &kp W &kp O &kp U &kp L &kp D &kp SPC) // w+o+u -> would
    CHMAC(ch_all, &kp A &kp L &kp L &kp SPC) // a+l+x -> all
    CHMAC(ch_will, &kp W &kp I &kp L &kp L &kp SPC) // w+i+l -> will
    CHMAC(ch_there, &kp T &kp H &kp E &kp R &kp E &kp SPC) // t+h+r -> there
    CHMAC(ch_say, &kp S &kp A &kp Y &kp SPC) // s+a+y -> say
    CHMAC(ch_who, &kp W &kp H &kp O &kp SPC) // w+h+o -> who
    CHMAC(ch_make, &kp M &kp A &kp K &kp E &kp SPC) // m+a+k -> make
    CHMAC(ch_when, &kp W &kp H &kp E &kp N &kp SPC) // w+h+e -> when
    CHMAC(ch_can, &kp C &kp A &kp N &kp SPC) // c+a+n -> can
    CHMAC(ch_more, &kp M &kp O &kp R &kp E &kp SPC) // m+r+e -> more
    CHMAC(ch_if, &kp I &kp F &kp SPC) // i+f+space -> if
    CHMAC(ch_no, &kp N &kp O &kp SPC) // n+e+space -> no
    CHMAC(ch_man, &kp M &kp A &kp N &kp SPC) // k+a+n -> man
    CHMAC(ch_out, &kp O &kp U &kp T &kp SPC) // o+u+t -> out
    CHMAC(ch_other, &kp O &kp T &kp H &kp E &kp R &kp SPC) // o+t+r -> other
    CHMAC(ch_so, &kp S &kp O &kp SPC) // s+o+space -> so
    CHMAC(ch_what, &kp W &kp H &kp A &kp T &kp SPC) // w+h+t -> what
    CHMAC(ch_time, &kp T &kp I &kp M &kp E &kp SPC) // t+m+e -> time
    CHMAC(ch_up, &kp U &kp P &kp SPC) // u+p+space -> up
    CHMAC(ch_go, &kp G &kp O &kp SPC) // g+o+space -> go
    CHMAC(ch_about, &kp A &kp B &kp O &kp U &kp T &kp SPC) // b+o+u -> about
    CHMAC(ch_than, &kp T &kp H &kp A &kp N &kp SPC) // t+a+n -> than
    CHMAC(ch_into, &kp I &kp N &kp T &kp O &kp SPC) // i+n+o -> into
    CHMAC(ch_could, &kp C &kp O &kp U &kp L &kp D &kp SPC) // c+o+u -> could
    CHMAC(ch_state, &kp S &kp T &kp A &kp T &kp E &kp SPC) // s+t+a -> state
    CHMAC(ch_only, &kp O &kp N &kp L &kp Y &kp SPC) // o+l+y -> only
    CHMAC(ch_new, &kp N &kp E &kp W &kp SPC) // n+e+w -> new
    CHMAC(ch_year, &kp Y &kp E &kp A &kp R &kp SPC) // y+e+a -> year
    CHMAC(ch_some, &kp S &kp O &kp M &kp E &kp SPC) // s+o+m -> some
    CHMAC(ch_take, &kp T &kp A &kp K &kp E &kp SPC) // a+k+e -> take
    CHMAC(ch_come, &kp C &kp O &kp M &kp E &kp SPC) // c+o+m -> come
    CHMAC(ch_these, &kp T &kp H &kp E &kp S &kp E &kp SPC) // n+h+s -> these
    CHMAC(ch_know, &kp K &kp N &kp O &kp W &kp SPC) // k+n+o -> know
    CHMAC(ch_see, &kp S &kp E &kp E &kp SPC) // s+e+k -> see
    CHMAC(ch_use, &kp U &kp S &kp E &kp SPC) // u+s+e -> use
    CHMAC(ch_get, &kp G &kp E &kp T &kp SPC) // g+e+t -> get
    CHMAC(ch_like, &kp L &kp I &kp K &kp E &kp SPC) // l+i+k -> like
    CHMAC(ch_then, &kp T &kp H &kp E &kp N &kp SPC) // t+e+n -> then
    CHMAC(ch_first, &kp F &kp I &kp R &kp S &kp T &kp SPC) // f+r+s -> first
    CHMAC(ch_any, &kp A &kp N &kp Y &kp SPC) // a+n+y -> any
    CHMAC(ch_work, &kp W &kp O &kp R &kp K &kp SPC) // o+r+k -> work
    CHMAC(ch_now, &kp N &kp O &kp W &kp SPC) // n+o+w -> now
    CHMAC(ch_may, &kp M &kp A &kp Y &kp SPC) // m+a+y -> may
    CHMAC(ch_such, &kp S &kp U &kp C &kp H &kp SPC) // s+c+h -> such
    CHMAC(ch_give, &kp G &kp I &kp V &kp E &kp SPC) // g+i+v -> give
    CHMAC(ch_over, &kp O &kp V &kp E &kp R &kp SPC) // o+v+r -> over
    CHMAC(ch_think, &kp T &kp H &kp I &kp N &kp K &kp SPC) // h+i+k -> think
    CHMAC(ch_most, &kp M &kp O &kp S &kp T &kp SPC) // m+o+t -> most
    CHMAC(ch_even, &kp E &kp V &kp E &kp N &kp SPC) // e+v+n -> even
    CHMAC(ch_find, &kp F &kp I &kp N &kp D &kp SPC) // f+i+d -> find
    CHMAC(ch_day, &kp D &kp A &kp Y &kp SPC) // d+a+y -> day
    CHMAC(ch_also, &kp A &kp L &kp S &kp O &kp SPC) // a+l+o -> also
    CHMAC(ch_after, &kp A &kp F &kp T &kp E &kp R &kp SPC) // f+t+r -> after
    CHMAC(ch_way, &kp W &kp A &kp Y &kp SPC) // w+a+y -> way
    CHMAC(ch_many, &kp M &kp A &kp N &kp Y &kp SPC) // m+n+y -> many
    CHMAC(ch_must, &kp M &kp U &kp S &kp T &kp SPC) // m+u+t -> must
    CHMAC(ch_look, &kp L &kp O &kp O &kp K &kp SPC) // l+o+k -> look
    CHMAC(ch_before, &kp B &kp E &kp F &kp O &kp R &kp E &kp SPC) // b+f+o -> before
    CHMAC(ch_great, &kp G &kp R &kp E &kp A &kp T &kp SPC) // g+r+e -> great
    CHMAC(ch_back, &kp B &kp A &kp C &kp K &kp SPC) // b+a+c -> back
    CHMAC(ch_through, &kp T &kp H &kp R &kp O &kp U &kp G &kp H &kp SPC) // h+r+g -> through
    CHMAC(ch_long, &kp L &kp O &kp N &kp G &kp SPC) // l+o+n -> long
    CHMAC(ch_where, &kp W &kp H &kp E &kp R &kp E &kp SPC) // w+h+r -> where
    CHMAC(ch_much, &kp M &kp U &kp C &kp H &kp SPC) // m+u+c -> much
    CHMAC(ch_should, &kp S &kp H &kp O &kp U &kp L &kp D &kp SPC) // s+o+u -> should
    CHMAC(ch_well, &kp W &kp E &kp L &kp L &kp SPC) // w+e+l -> well
    CHMAC(ch_people, &kp P &kp E &kp O &kp P &kp L &kp E &kp SPC) // p+e+l -> people
    CHMAC(ch_down, &kp D &kp O &kp W &kp N &kp SPC) // d+w+n -> down
    CHMAC(ch_own, &kp O &kp W &kp N &kp SPC) // o+w+f -> own
    CHMAC(ch_just, &kp J &kp U &kp S &kp T &kp SPC) // u+s+t -> just
    CHMAC(ch_because, &kp B &kp E &kp C &kp A &kp U &kp S &kp E &kp SPC) // b+e+a -> because
    CHMAC(ch_good, &kp G &kp O &kp O &kp D &kp SPC) // v+o+d -> good
    CHMAC(ch_each, &kp E &kp A &kp C &kp H &kp SPC) // a+c+h -> each
    CHMAC(ch_those, &kp T &kp H &kp O &kp S &kp E &kp SPC) // t+o+s -> those
    CHMAC(ch_feel, &kp F &kp E &kp E &kp L &kp SPC) // f+e+l -> feel
    CHMAC(ch_seem, &kp S &kp E &kp E &kp M &kp SPC) // s+e+m -> seem
    CHMAC(ch_how, &kp H &kp O &kp W &kp SPC) // h+o+u -> how
    CHMAC(ch_high, &kp H &kp I &kp G &kp H &kp SPC) // h+i+g -> high
    CHMAC(ch_too, &kp T &kp O &kp O &kp SPC) // t+o+f -> too
    CHMAC(ch_place, &kp P &kp L &kp A &kp C &kp E &kp SPC) // p+c+e -> place
    CHMAC(ch_little, &kp L &kp I &kp T &kp T &kp L &kp E &kp SPC) // l+i+t -> little
    CHMAC(ch_world, &kp W &kp O &kp R &kp L &kp D &kp SPC) // w+l+d -> world
    CHMAC(ch_very, &kp V &kp E &kp R &kp Y &kp SPC) // v+e+r -> very
    CHMAC(ch_still, &kp S &kp T &kp I &kp L &kp L &kp SPC) // s+t+l -> still
    CHMAC(ch_nation, &kp N &kp A &kp T &kp I &kp O &kp N &kp SPC) // n+a+i -> nation
    CHMAC(ch_hand, &kp H &kp A &kp N &kp D &kp SPC) // h+n+d -> hand
    CHMAC(ch_old, &kp O &kp L &kp D &kp SPC) // o+l+d -> old
    CHMAC(ch_life, &kp L &kp I &kp F &kp E &kp SPC) // l+i+f -> life
    CHMAC(ch_tell, &kp T &kp E &kp L &kp L &kp SPC) // t+e+l -> tell
    CHMAC(ch_write, &kp W &kp R &kp I &kp T &kp E &kp SPC) // r+i+e -> write
    CHMAC(ch_become, &kp B &kp E &kp C &kp O &kp M &kp E &kp SPC) // c+m+e -> become
    CHMAC(ch_here, &kp H &kp E &kp R &kp E &kp SPC) // j+h+e -> here
    CHMAC(ch_show, &kp S &kp H &kp O &kp W &kp SPC) // s+h+w -> show
    CHMAC(ch_house, &kp H &kp O &kp U &kp S &kp E &kp SPC) // h+o+s -> house
    CHMAC(ch_both, &kp B &kp O &kp T &kp H &kp SPC) // b+o+h -> both
    CHMAC(ch_between, &kp B &kp E &kp T &kp W &kp E &kp E &kp N &kp SPC) // b+e+n -> between
    CHMAC(ch_need, &kp N &kp E &kp E &kp D &kp SPC) // t+n+d -> need
    CHMAC(ch_mean, &kp M &kp E &kp A &kp N &kp SPC) // m+e+a -> mean
    CHMAC(ch_call, &kp C &kp A &kp L &kp L &kp SPC) // c+a+l -> call
    CHMAC(ch_develop, &kp D &kp E &kp V &kp E &kp L &kp O &kp P &kp SPC) // d+e+v -> develop
    CHMAC(ch_under, &kp U &kp N &kp D &kp E &kp R &kp SPC) // u+n+d -> under
    CHMAC(ch_last, &kp L &kp A &kp S &kp T &kp SPC) // l+a+s -> last
    CHMAC(ch_right, &kp R &kp I &kp G &kp H &kp T &kp SPC) // r+i+t -> right
    CHMAC(ch_move, &kp M &kp O &kp V &kp E &kp SPC) // m+v+e -> move
    CHMAC(ch_thing, &kp T &kp H &kp I &kp N &kp G &kp SPC) // t+i+n -> thing
    CHMAC(ch_general, &kp G &kp E &kp N &kp E &kp R &kp A &kp L &kp SPC) // g+e+n -> general
    CHMAC(ch_school, &kp S &kp C &kp H &kp O &kp O &kp L &kp SPC) // s+h+l -> school
    CHMAC(ch_never, &kp N &kp E &kp V &kp E &kp R &kp SPC) // n+v+r -> never
    CHMAC(ch_same, &kp S &kp A &kp M &kp E &kp SPC) // s+a+m -> same
    CHMAC(ch_another, &kp A &kp N &kp O &kp T &kp H &kp E &kp R &kp SPC) // a+h+r -> another
    CHMAC(ch_begin, &kp B &kp E &kp G &kp I &kp N &kp SPC) // e+g+i -> begin
    CHMAC(ch_while, &kp W &kp H &kp I &kp L &kp E &kp SPC) // h+i+e -> while
    CHMAC(ch_number, &kp N &kp U &kp M &kp B &kp E &kp R &kp SPC) // n+e+r -> number
    CHMAC(ch_part, &kp P &kp A &kp R &kp T &kp SPC) // p+a+r -> part
    CHMAC(ch_turn, &kp T &kp U &kp R &kp N &kp SPC) // t+u+n -> turn
    CHMAC(ch_real, &kp R &kp E &kp A &kp L &kp SPC) // e+a+l -> real
    CHMAC(ch_leave, &kp L &kp E &kp A &kp V &kp E &kp SPC) // e+a+v -> leave
    CHMAC(ch_might, &kp M &kp I &kp G &kp H &kp T &kp SPC) // m+i+t -> might
    CHMAC(ch_want, &kp W &kp A &kp N &kp T &kp SPC) // w+a+t -> want
    CHMAC(ch_point, &kp P &kp O &kp I &kp N &kp T &kp SPC) // p+o+i -> point
    CHMAC(ch_form, &kp F &kp O &kp R &kp M &kp SPC) // z+o+r -> form
    CHMAC(ch_off, &kp O &kp F &kp F &kp SPC) // o+f+k -> off
    CHMAC(ch_child, &kp C &kp H &kp I &kp L &kp D &kp SPC) // c+i+d -> child
    CHMAC(ch_few, &kp F &kp E &kp W &kp SPC) // f+e+w -> few
    CHMAC(ch_small, &kp S &kp M &kp A &kp L &kp L &kp SPC) // m+a+l -> small
    CHMAC(ch_since, &kp S &kp I &kp N &kp C &kp E &kp SPC) // s+i+e -> since
    CHMAC(ch_against, &kp A &kp G &kp A &kp I &kp N &kp S &kp T &kp SPC) // a+g+n -> against
    CHMAC(ch_ask, &kp A &kp S &kp K &kp SPC) // a+s+k -> ask
    CHMAC(ch_late, &kp L &kp A &kp T &kp E &kp SPC) // l+a+t -> late
    CHMAC(ch_home, &kp H &kp O &kp M &kp E &kp SPC) // g+m+e -> home
    CHMAC(ch_interes, &kp I &kp N &kp T &kp E &kp R &kp E &kp S &kp T &kp SPC) // i+n+r -> interest
    CHMAC(ch_large, &kp L &kp A &kp R &kp G &kp E &kp SPC) // a+r+g -> large
    CHMAC(ch_person, &kp P &kp E &kp R &kp S &kp O &kp N &kp SPC) // p+s+n -> person
    CHMAC(ch_end, &kp E &kp N &kp D &kp SPC) // e+n+d -> end
    CHMAC(ch_open, &kp O &kp P &kp E &kp N &kp SPC) // o+p+n -> open
    CHMAC(ch_public, &kp P &kp U &kp B &kp L &kp I &kp C &kp SPC) // p+l+i -> public
    CHMAC(ch_follow, &kp F &kp O &kp L &kp L &kp O &kp W &kp SPC) // f+o+l -> follow
    CHMAC(ch_during, &kp D &kp U &kp R &kp I &kp N &kp G &kp SPC) // d+r+n -> during
    CHMAC(ch_present, &kp P &kp R &kp E &kp S &kp E &kp N &kp T &kp SPC) // r+n+t -> present
    CHMAC(ch_without, &kp W &kp I &kp T &kp H &kp O &kp U &kp T &kp SPC) // i+t+o -> without
    CHMAC(ch_again, &kp A &kp G &kp A &kp I &kp N &kp SPC) // a+g+i -> again
    CHMAC(ch_hold, &kp H &kp O &kp L &kp D &kp SPC) // h+o+d -> hold
    CHMAC(ch_govern, &kp G &kp O &kp V &kp E &kp R &kp N &kp SPC) // g+r+n -> govern
    CHMAC(ch_around, &kp A &kp R &kp O &kp U &kp N &kp D &kp SPC) // a+r+d -> around
    CHMAC(ch_possibl, &kp P &kp O &kp S &kp S &kp I &kp B &kp L &kp E &kp SPC) // p+s+e -> possible
    CHMAC(ch_head, &kp H &kp E &kp A &kp D &kp SPC) // h+e+d -> head
    CHMAC(ch_conside, &kp C &kp O &kp N &kp S &kp I &kp D &kp E &kp R &kp SPC) // c+n+d -> consider
    CHMAC(ch_word, &kp W &kp O &kp R &kp D &kp SPC) // w+r+d -> word
    CHMAC(ch_program, &kp P &kp R &kp O &kp G &kp R &kp A &kp M &kp SPC) // r+g+m -> program
    CHMAC(ch_problem, &kp P &kp R &kp O &kp B &kp L &kp E &kp M &kp SPC) // l+e+m -> problem
    CHMAC(ch_however, &kp H &kp O &kp W &kp E &kp V &kp E &kp R &kp SPC) // h+e+v -> however
    CHMAC(ch_lead, &kp L &kp E &kp A &kp D &kp SPC) // e+a+d -> lead
    CHMAC(ch_system, &kp S &kp Y &kp S &kp T &kp E &kp M &kp SPC) // s+t+m -> system
    CHMAC(ch_set, &kp S &kp E &kp T &kp SPC) // s+e+t -> set
    CHMAC(ch_order, &kp O &kp R &kp D &kp E &kp R &kp SPC) // o+r+d -> order
    CHMAC(ch_eye, &kp E &kp Y &kp E &kp SPC) // e+y+x -> eye
    CHMAC(ch_plan, &kp P &kp L &kp A &kp N &kp SPC) // p+l+n -> plan
    CHMAC(ch_run, &kp R &kp U &kp N &kp SPC) // r+u+n -> run
    CHMAC(ch_keep, &kp K &kp E &kp E &kp P &kp SPC) // k+e+x -> keep
    CHMAC(ch_face, &kp F &kp A &kp C &kp E &kp SPC) // f+a+c -> face
    CHMAC(ch_fact, &kp F &kp A &kp C &kp T &kp SPC) // f+c+t -> fact
    CHMAC(ch_group, &kp G &kp R &kp O &kp U &kp P &kp SPC) // g+o+u -> group
    CHMAC(ch_play, &kp P &kp L &kp A &kp Y &kp SPC) // p+l+y -> play
    CHMAC(ch_stand, &kp S &kp T &kp A &kp N &kp D &kp SPC) // s+n+d -> stand
    CHMAC(ch_increas, &kp I &kp N &kp C &kp R &kp E &kp A &kp S &kp E &kp SPC) // i+n+c -> increase
    CHMAC(ch_early, &kp E &kp A &kp R &kp L &kp Y &kp SPC) // e+l+y -> early
    CHMAC(ch_course, &kp C &kp O &kp U &kp R &kp S &kp E &kp SPC) // o+r+s -> course
    CHMAC(ch_change, &kp C &kp H &kp A &kp N &kp G &kp E &kp SPC) // c+h+e -> change
    CHMAC(ch_help, &kp H &kp E &kp L &kp P &kp SPC) // h+l+p -> help
    CHMAC(ch_line, &kp L &kp I &kp N &kp E &kp SPC) // l+n+e -> line
    CHMAC(ch_his, &kp H &kp I &kp S &kp SPC) // h+i+s -> his
    CHMAC(ch_her, &kp H &kp E &kp R &kp SPC) // h+e+r -> her
    CHMAC(ch_an, &kp A &kp N &kp SPC) // a+n+space -> an
    CHMAC(ch_my, &kp M &kp Y &kp SPC) // m+y+space -> my
    CHMAC(ch_their, &kp T &kp H &kp E &kp I &kp R &kp SPC) // h+i+r -> their
    CHMAC(ch_me, &kp M &kp E &kp SPC) // m+e+space -> me
    CHMAC(ch_him, &kp H &kp I &kp M &kp SPC) // b+i+m -> him
    CHMAC(ch_your, &kp Y &kp O &kp U &kp R &kp SPC) // y+o+r -> your
    CHMAC(ch_its, &kp I &kp T &kp S &kp SPC) // i+t+s -> its
    CHMAC(ch_two, &kp T &kp W &kp O &kp SPC) // t+w+o -> two
    CHMAC(ch_our, &kp O &kp U &kp R &kp SPC) // o+u+r -> our
    CHMAC(ch_us, &kp U &kp S &kp SPC) // u+s+space -> us
    CHMAC(ch_is, &kp I &kp S &kp SPC) // i+s+space -> is
    CHMAC(ch_was, &kp W &kp A &kp S &kp SPC) // w+a+s -> was
    CHMAC(ch_are, &kp A &kp R &kp E &kp SPC) // a+r+e -> are
    CHMAC(ch_had, &kp H &kp A &kp D &kp SPC) // h+a+d -> had
    CHMAC(ch_were, &kp W &kp E &kp R &kp E &kp SPC) // w+e+r -> were
    CHMAC(ch_said, &kp S &kp A &kp I &kp D &kp SPC) // s+a+i -> said
    CHMAC(ch_has, &kp H &kp A &kp S &kp SPC) // h+a+s -> has
    CHMAC(ch_sound, &kp S &kp O &kp U &kp N &kp D &kp SPC) // s+u+d -> sound
    CHMAC(ch_water, &kp W &kp A &kp T &kp E &kp R &kp SPC) // w+t+r -> water
    CHMAC(ch_side, &kp S &kp I &kp D &kp E &kp SPC) // s+i+d -> side
    CHMAC(ch_made, &kp M &kp A &kp D &kp E &kp SPC) // m+d+e -> made
    CHMAC(ch_live, &kp L &kp I &kp V &kp E &kp SPC) // l+i+v -> live
    CHMAC(ch_round, &kp R &kp O &kp U &kp N &kp D &kp SPC) // o+u+d -> round
    CHMAC(ch_came, &kp C &kp A &kp M &kp E &kp SPC) // c+a+m -> came
    CHMAC(ch_every, &kp E &kp V &kp E &kp R &kp Y &kp SPC) // e+r+y -> every
    CHMAC(ch_name, &kp N &kp A &kp M &kp E &kp SPC) // n+a+e -> name
    CHMAC(ch_sentenc, &kp S &kp E &kp N &kp T &kp E &kp N &kp C &kp E &kp SPC) // s+e+n -> sentence
    CHMAC(ch_low, &kp L &kp O &kp W &kp SPC) // l+o+w -> low
    CHMAC(ch_differ, &kp D &kp I &kp F &kp F &kp E &kp R &kp SPC) // d+f+r -> differ
    CHMAC(ch_cause, &kp C &kp A &kp U &kp S &kp E &kp SPC) // c+a+s -> cause
    CHMAC(ch_boy, &kp B &kp O &kp Y &kp SPC) // b+o+y -> boy
    CHMAC(ch_does, &kp D &kp O &kp E &kp S &kp SPC) // d+e+s -> does
    CHMAC(ch_air, &kp A &kp I &kp R &kp SPC) // a+i+r -> air
    CHMAC(ch_put, &kp P &kp U &kp T &kp SPC) // p+u+t -> put
    CHMAC(ch_port, &kp P &kp O &kp R &kp T &kp SPC) // p+o+r -> port
    CHMAC(ch_spell, &kp S &kp P &kp E &kp L &kp L &kp SPC) // s+p+l -> spell
    CHMAC(ch_land, &kp L &kp A &kp N &kp D &kp SPC) // l+n+d -> land
    CHMAC(ch_big, &kp B &kp I &kp G &kp SPC) // b+i+g -> big
    CHMAC(ch_act, &kp A &kp C &kp T &kp SPC) // a+c+t -> act
    CHMAC(ch_why, &kp W &kp H &kp Y &kp SPC) // w+h+y -> why
    CHMAC(ch_men, &kp M &kp E &kp N &kp SPC) // m+e+n -> men
    CHMAC(ch_went, &kp W &kp E &kp N &kp T &kp SPC) // w+n+t -> went
    CHMAC(ch_light, &kp L &kp I &kp G &kp H &kp T &kp SPC) // l+i+g -> light
    CHMAC(ch_kind, &kp K &kp I &kp N &kp D &kp SPC) // i+n+d -> kind
    CHMAC(ch_picture, &kp P &kp I &kp C &kp T &kp U &kp R &kp E &kp SPC) // p+i+c -> picture
    CHMAC(ch_try, &kp T &kp R &kp Y &kp SPC) // t+r+y -> try
    CHMAC(ch_animal, &kp A &kp N &kp I &kp M &kp A &kp L &kp SPC) // a+n+l -> animal
    CHMAC(ch_mother, &kp M &kp O &kp T &kp H &kp E &kp R &kp SPC) // m+t+r -> mother
    CHMAC(ch_build, &kp B &kp U &kp I &kp L &kp D &kp SPC) // b+u+l -> build
    CHMAC(ch_self, &kp S &kp E &kp L &kp F &kp SPC) // s+l+f -> self
    CHMAC(ch_earth, &kp E &kp A &kp R &kp T &kp H &kp SPC) // e+a+h -> earth
    CHMAC(ch_father, &kp F &kp A &kp T &kp H &kp E &kp R &kp SPC) // f+a+e -> father
    CHMAC(ch_page, &kp P &kp A &kp G &kp E &kp SPC) // p+a+e -> page
    CHMAC(ch_country, &kp C &kp O &kp U &kp N &kp T &kp R &kp Y &kp SPC) // c+u+y -> country
    CHMAC(ch_found, &kp F &kp O &kp U &kp N &kp D &kp SPC) // f+u+d -> found
    CHMAC(ch_answer, &kp A &kp N &kp S &kp W &kp E &kp R &kp SPC) // a+n+s -> answer
    CHMAC(ch_grow, &kp G &kp R &kp O &kp W &kp SPC) // g+r+w -> grow
    CHMAC(ch_study, &kp S &kp T &kp U &kp D &kp Y &kp SPC) // t+u+y -> study
    CHMAC(ch_learn, &kp L &kp E &kp A &kp R &kp N &kp SPC) // l+e+r -> learn
    CHMAC(ch_plant, &kp P &kp L &kp A &kp N &kp T &kp SPC) // p+l+t -> plant
    CHMAC(ch_cover, &kp C &kp O &kp V &kp E &kp R &kp SPC) // c+o+v -> cover
    CHMAC(ch_food, &kp F &kp O &kp O &kp D &kp SPC) // f+o+d -> food
    CHMAC(ch_sun, &kp S &kp U &kp N &kp SPC) // s+u+n -> sun
    CHMAC(ch_four, &kp F &kp O &kp U &kp R &kp SPC) // f+o+u -> four
    CHMAC(ch_thought, &kp T &kp H &kp O &kp U &kp G &kp H &kp T &kp SPC) // t+h+u -> thought
    CHMAC(ch_city, &kp C &kp I &kp T &kp Y &kp SPC) // c+t+y -> city
    CHMAC(ch_cross, &kp C &kp R &kp O &kp S &kp S &kp SPC) // c+r+s -> cross
    CHMAC(ch_hard, &kp H &kp A &kp R &kp D &kp SPC) // h+r+d -> hard
    CHMAC(ch_far, &kp F &kp A &kp R &kp SPC) // f+a+r -> far
    CHMAC(ch_sea, &kp S &kp E &kp A &kp SPC) // s+e+a -> sea
    CHMAC(ch_draw, &kp D &kp R &kp A &kp W &kp SPC) // d+a+w -> draw
    CHMAC(ch_left, &kp L &kp E &kp F &kp T &kp SPC) // l+f+t -> left
    CHMAC(ch_press, &kp P &kp R &kp E &kp S &kp S &kp SPC) // p+r+s -> press
    CHMAC(ch_close, &kp C &kp L &kp O &kp S &kp E &kp SPC) // c+o+s -> close
    CHMAC(ch_night, &kp N &kp I &kp G &kp H &kp T &kp SPC) // n+g+h -> night
    CHMAC(ch_north, &kp N &kp O &kp R &kp T &kp H &kp SPC) // n+r+h -> north
    CHMAC(ch_togethe, &kp T &kp O &kp G &kp E &kp T &kp H &kp E &kp R &kp SPC) // o+g+h -> together
    CHMAC(ch_next, &kp N &kp E &kp X &kp T &kp SPC) // e+x+t -> next
    CHMAC(ch_white, &kp W &kp H &kp I &kp T &kp E &kp SPC) // w+i+e -> white
    CHMAC(ch_childre, &kp C &kp H &kp I &kp L &kp D &kp R &kp E &kp N &kp SPC) // h+i+d -> children
    CHMAC(ch_got, &kp G &kp O &kp T &kp SPC) // g+o+t -> got
    CHMAC(ch_walk, &kp W &kp A &kp L &kp K &kp SPC) // a+l+k -> walk
    CHMAC(ch_example, &kp E &kp X &kp A &kp M &kp P &kp L &kp E &kp SPC) // m+p+l -> example
    CHMAC(ch_always, &kp A &kp L &kp W &kp A &kp Y &kp S &kp SPC) // l+w+y -> always
    CHMAC(ch_music, &kp M &kp U &kp S &kp I &kp C &kp SPC) // m+s+c -> music
    CHMAC(ch_mark, &kp M &kp A &kp R &kp K &kp SPC) // m+r+k -> mark
    CHMAC(ch_often, &kp O &kp F &kp T &kp E &kp N &kp SPC) // o+t+e -> often
    CHMAC(ch_letter, &kp L &kp E &kp T &kp T &kp E &kp R &kp SPC) // l+t+r -> letter
    CHMAC(ch_until, &kp U &kp N &kp T &kp I &kp L &kp SPC) // n+t+l -> until
    CHMAC(ch_mile, &kp M &kp I &kp L &kp E &kp SPC) // m+i+e -> mile
    CHMAC(ch_river, &kp R &kp I &kp V &kp E &kp R &kp SPC) // r+i+v -> river
    CHMAC(ch_car, &kp C &kp A &kp R &kp SPC) // c+a+r -> car
    CHMAC(ch_feet, &kp F &kp E &kp E &kp T &kp SPC) // f+e+t -> feet
    CHMAC(ch_care, &kp C &kp A &kp R &kp E &kp SPC) // c+r+e -> care
    CHMAC(ch_second, &kp S &kp E &kp C &kp O &kp N &kp D &kp SPC) // s+e+c -> second
    CHMAC(ch_carry, &kp C &kp A &kp R &kp R &kp Y &kp SPC) // c+a+y -> carry
    CHMAC(ch_science, &kp S &kp C &kp I &kp E &kp N &kp C &kp E &kp SPC) // s+c+i -> science
    CHMAC(ch_eat, &kp E &kp A &kp T &kp SPC) // e+a+t -> eat
    CHMAC(ch_friend, &kp F &kp R &kp I &kp E &kp N &kp D &kp SPC) // r+i+d -> friend
    CHMAC(ch_began, &kp B &kp E &kp G &kp A &kp N &kp SPC) // b+g+n -> began
    CHMAC(ch_idea, &kp I &kp D &kp E &kp A &kp SPC) // i+d+a -> idea
    CHMAC(ch_fish, &kp F &kp I &kp S &kp H &kp SPC) // f+i+s -> fish
    CHMAC(ch_mountai, &kp M &kp O &kp U &kp N &kp T &kp A &kp I &kp N &kp SPC) // o+a+t -> mountain
    CHMAC(ch_stop, &kp S &kp T &kp O &kp P &kp SPC) // s+t+p -> stop
    CHMAC(ch_once, &kp O &kp N &kp C &kp E &kp SPC) // n+c+e -> once
    CHMAC(ch_base, &kp B &kp A &kp S &kp E &kp SPC) // b+a+s -> base
    CHMAC(ch_horse, &kp H &kp O &kp R &kp S &kp E &kp SPC) // h+r+s -> horse
    CHMAC(ch_cut, &kp C &kp U &kp T &kp SPC) // c+u+t -> cut
    CHMAC(ch_sure, &kp S &kp U &kp R &kp E &kp SPC) // s+u+r -> sure
    CHMAC(ch_red, &kp R &kp E &kp D &kp SPC) // r+e+d -> red
    CHMAC(ch_class, &kp C &kp L &kp A &kp S &kp S &kp SPC) // c+l+s -> class
    CHMAC(ch_true, &kp T &kp R &kp U &kp E &kp SPC) // t+r+u -> true
    CHMAC(ch_six, &kp S &kp I &kp X &kp SPC) // s+i+x -> six
    CHMAC(ch_war, &kp W &kp A &kp R &kp SPC) // w+a+r -> war
    CHMAC(ch_lay, &kp L &kp A &kp Y &kp SPC) // l+a+y -> lay
    CHMAC(ch_map, &kp M &kp A &kp P &kp SPC) // m+a+p -> map
    CHMAC(ch_fly, &kp F &kp L &kp Y &kp SPC) // f+l+y -> fly
    CHMAC(ch_cry, &kp C &kp R &kp Y &kp SPC) // c+r+y -> cry
    CHMAC(ch_box, &kp B &kp O &kp X &kp SPC) // b+o+x -> box
    CHMAC(ch_noun, &kp N &kp O &kp U &kp N &kp SPC) // n+o+u -> noun
    CHMAC(ch_oh, &kp O &kp H &kp SPC) // o+h+space -> oh
    CHMAC(ch_free, &kp F &kp R &kp E &kp E &kp SPC) // f+r+e -> free
    CHMAC(ch_dry, &kp D &kp R &kp Y &kp SPC) // d+r+y -> dry
    CHMAC(ch_ago, &kp A &kp G &kp O &kp SPC) // a+g+o -> ago
    CHMAC(ch_ran, &kp R &kp A &kp N &kp SPC) // r+a+n -> ran
    CHMAC(ch_hot, &kp H &kp O &kp T &kp SPC) // h+o+t -> hot
    CHMAC(ch_yet, &kp Y &kp E &kp T &kp SPC) // y+e+t -> yet
    CHMAC(ch_am, &kp A &kp M &kp SPC) // a+m+space -> am
    CHMAC(ch_arm, &kp A &kp R &kp M &kp SPC) // a+r+m -> arm
    CHMAC(ch_ice, &kp I &kp C &kp E &kp SPC) // i+c+e -> ice
    CHMAC(ch_matter, &kp M &kp A &kp T &kp T &kp E &kp R &kp SPC) // m+a+t -> matter
    CHMAC(ch_art, &kp A &kp R &kp T &kp SPC) // a+r+t -> art
    CHMAC(ch_cell, &kp C &kp E &kp L &kp L &kp SPC) // c+e+l -> cell
    CHMAC(ch_leg, &kp L &kp E &kp G &kp SPC) // l+e+g -> leg
    CHMAC(ch_joy, &kp J &kp O &kp Y &kp SPC) // j+o+y -> joy
    CHMAC(ch_job, &kp J &kp O &kp B &kp SPC) // j+o+b -> job
    CHMAC(ch_gas, &kp G &kp A &kp S &kp SPC) // g+a+s -> gas
    CHMAC(ch_buy, &kp B &kp U &kp Y &kp SPC) // b+u+y -> buy
    CHMAC(ch_hill, &kp H &kp I &kp L &kp L &kp SPC) // h+i+l -> hill
    CHMAC(ch_law, &kp L &kp A &kp W &kp SPC) // l+a+w -> law
    CHMAC(ch_lie, &kp L &kp I &kp E &kp SPC) // l+i+e -> lie
    CHMAC(ch_son, &kp S &kp O &kp N &kp SPC) // s+o+n -> son
    CHMAC(ch_pay, &kp P &kp A &kp Y &kp SPC) // p+a+y -> pay
    CHMAC(ch_age, &kp A &kp G &kp E &kp SPC) // a+g+e -> age
    CHMAC(ch_cool, &kp C &kp O &kp O &kp L &kp SPC) // c+o+l -> cool
    CHMAC(ch_lot, &kp L &kp O &kp T &kp SPC) // l+o+t -> lot
    CHMAC(ch_key, &kp K &kp E &kp Y &kp SPC) // k+e+y -> key
    CHMAC(ch_row, &kp R &kp O &kp W &kp SPC) // r+o+w -> row
    CHMAC(ch_die, &kp D &kp I &kp E &kp SPC) // d+i+e -> die
    CHMAC(ch_oil, &kp O &kp I &kp L &kp SPC) // o+i+l -> oil
    CHMAC(ch_fit, &kp F &kp I &kp T &kp SPC) // f+i+t -> fit
    CHMAC(ch_hit, &kp H &kp I &kp T &kp SPC) // h+i+t -> hit
    CHMAC(ch_rub, &kp R &kp U &kp B &kp SPC) // r+u+b -> rub
    CHMAC(ch_tie, &kp T &kp I &kp E &kp SPC) // t+i+e -> tie
    CHMAC(ch_gun, &kp G &kp U &kp N &kp SPC) // g+u+n -> gun
    CHMAC(ch_nine, &kp N &kp I &kp N &kp E &kp SPC) // n+i+e -> nine
    CHMAC(ch_thank, &kp T &kp H &kp A &kp N &kp K &kp SPC) // h+a+k -> thank
    CHMAC(ch_experie, &kp E &kp X &kp P &kp E &kp R &kp I &kp E &kp N &kp C &kp E &kp SPC) // e+x+p -> experience
    CHMAC(ch_led, &kp L &kp E &kp D &kp SPC) // l+e+d -> led
    CHMAC(ch_win, &kp W &kp I &kp N &kp SPC) // w+i+n -> win
    CHMAC(ch_feed, &kp F &kp E &kp E &kp D &kp SPC) // f+e+d -> feed
    CHMAC(ch_nor, &kp N &kp O &kp R &kp SPC) // n+o+r -> nor
    CHMAC(ch_fat, &kp F &kp A &kp T &kp SPC) // f+a+t -> fat
    CHMAC(ch_bar, &kp B &kp A &kp R &kp SPC) // b+a+r -> bar
    CHMAC(ch_log, &kp L &kp O &kp G &kp SPC) // l+o+g -> log
    CHMAC(ch_hey, &kp H &kp E &kp Y &kp SPC) // h+e+y -> hey
    CHMAC(ch_return, &kp R &kp E &kp T &kp U &kp R &kp N &kp SPC) // r+e+t -> return
    CHMAC(ch_probabl, &kp P &kp R &kp O &kp B &kp A &kp B &kp L &kp Y &kp SPC) // p+b+l+y -> probably
    CHMAC(ch_thank_y, &kp T &kp H &kp A &kp N &kp K &kp SPC &kp Y &kp O &kp U &kp SPC) // t+a+y -> thank you
    CHMAC(ch_thanks, &kp T &kp H &kp A &kp N &kp K &kp S &kp SPC) // t+n+s -> thanks
    CHMAC(ch_i_ve, &kp LS(I) &kp APOS &kp V &kp E &kp SPC) // i+v+e -> I've
    CHMAC(ch_per, &kp P &kp E &kp R &kp SPC) // p+e+r -> per
    CHMAC(ch_null, &kp N &kp U &kp L &kp L &kp SPC) // n+u+l -> null
    CHMAC(ch_nil, &kp N &kp I &kp L &kp SPC) // n+i+l -> nil
    CHMAC(ch_array, &kp A &kp R &kp R &kp A &kp Y &kp SPC) // a+r+y -> array
    CHMAC(ch_the_qui, &kp T &kp H &kp E &kp SPC &kp Q &kp U &kp I &kp C &kp K &kp SPC &kp B &kp R &kp O &kp W &kp N &kp SPC &kp F &kp O &kp X &kp SPC &kp J &kp U &kp M &kp P &kp S &kp SPC &kp O &kp V &kp E &kp R &kp SPC &kp T &kp H &kp E &kp SPC &kp L &kp A &kp Z &kp Y &kp SPC &kp D &kp O &kp G) // b+q+x+' -> the quick brown fox jumps over the lazy dog
    MACRO(ch_elberet, &kp LS(E) &kp L &kp B &kp E &kp R &kp E &kp T &kp H) // e+l+b+h -> Elbereth
    CHMAC(ch_shawn, &kp LS(S) &kp H &kp A &kp W &kp N &kp SPC) // h+a+n -> Shawn
    CHMAC(ch_moore, &kp LS(M) &kp O &kp O &kp R &kp E &kp SPC) // o+r+e -> Moore
    CHMAC(ch_sartak, &kp S &kp A &kp R &kp T &kp A &kp K &kp SPC) // s+a+r -> sartak
    CHMAC(ch_sartak_, &kp S &kp A &kp R &kp T &kp A &kp K &kp DOT &kp O &kp R &kp G &kp SPC) // s+r+. -> sartak.org
    CHMAC(ch_shawn_d, &kp S &kp H &kp A &kp W &kp N &kp DOT &kp D &kp E &kp V &kp SPC) // h+n+. -> shawn.dev
    CHMAC(ch_somervi, &kp LS(S) &kp O &kp M &kp E &kp R &kp V &kp I &kp L &kp L &kp E &kp SPC) // s+e+v -> Somerville
    CHMAC(ch_, &kp LS(W) &kp H &kp E &kp A &kp T &kp L &kp A &kp N &kp D &kp SPC)
  };
};

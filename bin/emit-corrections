#!/usr/bin/env node
const fs = require("fs");
const inputFile = "processed-anki.json";
const publicFile = "../qmk-config/corrections.c";
const personalFile = "../qmk-config/corrections_personal.c";

const config = JSON.parse(fs.readFileSync(inputFile));
const { chords } = config;

const corrections = [];

chords.forEach((chord) => {
  const actions = [chord.tap, chord.tap?.shift, chord.hold, chord.hold?.shift];
  const combo = chord.combo.join("+");

  actions.filter(Boolean).forEach((action) => {
    const alternates = [];
    if ("output" in action) {
      alternates.push([action, action.output, 0]);
    }

    action.alternates?.forEach((alternate, i) => {
      if (alternate.toIdx === 0) {
        return;
      }
      alternates.push([alternate, alternate.to, i + 1]);
    });

    alternates.forEach(([action, out, dupCount]) => {
      if (!action.reviewing) {
        return;
      }
      if (!out.match(/^[a-zA-Z]+$/)) {
        return;
      }
      const dups = dupCount ? ", Dup".repeat(dupCount) : "";
      const input = `${combo}${dups}`;
      corrections.push([action.exact ? out : `${out} `, input, chord.personal]);
    });
  });
});

const preamble = (actions, personalFile) => {
  if (personalFile) {
    return [];
  }

  return ['#include "corrections_personal.c"'];
};

const makeActions = (outs) => {
  const trie = {};
  const inputFor = {};
  outs.forEach(([out, input]) => {
    inputFor[out] = input;

    let os = trie;
    out.split("").forEach((c) => {
      if (!(c in os)) {
        os[c] = {};
      }
      os = os[c];
    });
    os[""] = true;
  });

  const lines = [];

  const collect = (os) => {
    const key = Object.keys(os)[0];
    if (key === "") {
      return "";
    }
    const value = os[key];
    return key + collect(value);
  };

  const recurse = (os, prefix, i) => {
    const keys = Object.keys(os).sort((a, b) => a.localeCompare(b));

    if (keys.length === 1) {
      const rest = collect(os);
      if (rest.length === 0) {
        return [
          `if (buffer[${i}] == 0) /*${prefix}*/ return "${inputFor[prefix]}";`,
        ];
      } else {
        return [
          `if (strcmp(buffer+${i}, /*${prefix}*/"${rest}") == 0) return "${
            inputFor[prefix + rest]
          }";`,
        ];
      }
    }

    const lines = [];
    lines.push(`switch (buffer[${i}]) {`);
    keys.forEach((c) => {
      if (c === "") {
        return;
      }
      const next = os[c];
      lines.push(`  case '${c}':`);
      const inner = recurse(next, prefix + c, i + 1).map((l) => `    ${l}`);
      lines.push(...inner);
      if (inner.length > 1) {
        lines.push(`    break;`);
      }
    });
    lines.push(`}`);

    return lines;
  };

  return recurse(trie, "", 0).map((l) => `  ${l}`);
};

const fn = (actions, personalFile) => {
  const name = personalFile ? "correct_chord_personal" : "correct_chord";
  const intro = `char* ${name}(char* buffer) {`.split("\n");

  const outro = (
    personalFile
      ? `
  return NULL;
}`
      : `
  return correct_chord_personal(buffer);
}`
  ).split("\n");

  return [...intro, ...makeActions(actions), ...outro];
};

const correctionsConfig = (allActions, personalFile) => {
  const lines = [];
  const actions = allActions.filter(
    ([, , personal]) => !!personal === personalFile
  );

  lines.push(...preamble(actions, personalFile), "");
  lines.push(...fn(actions, personalFile), "");

  return lines;
};

fs.writeFileSync(publicFile, correctionsConfig(corrections, false).join("\n"));
fs.writeFileSync(personalFile, correctionsConfig(corrections, true).join("\n"));

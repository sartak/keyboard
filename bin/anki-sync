#!/usr/bin/env node
const fs = require("fs");
const sqlite3 = require("better-sqlite3");
const protobuf = require("protobufjs");
const inputFile = "processed.json";
const outputFile = "processed-anki.json";
const templateDirectory = "web";
const fallbackDirectories = [];
const ankiFrontFile = `${templateDirectory}/anki-front.html`;
const ankiBackFile = `${templateDirectory}/anki-back.html`;
const ankiStyleFile = `${templateDirectory}/anki-style.css`;
const ankiShellFile = `${templateDirectory}/anki-shell.html`;
const shellOutput = "anki-test.html";
const ankiSrc = "../anki";

const [nodeArg, scriptArg] = process.argv;
if (process.argv.length !== 3 && process.argv.length !== 4) {
  console.error(
    `usage: ${nodeArg} ${scriptArg} collection.anki2 note-type\n` +
      `   or: ${nodeArg} ${scriptArg} shell-combo`
  );
  process.exit(1);
}

const shellCombo = process.argv.length === 3 ? process.argv[2] : null;
const ankiDatabase = process.argv.length === 4 ? process.argv[2] : null;
const noteType = process.argv.length === 4 ? process.argv[3] : null;

if (ankiDatabase !== null && !fs.existsSync(ankiDatabase)) {
  throw new Error(`anki sqlite database '${ankiDatabase}' does not exist`);
}

const config = JSON.parse(fs.readFileSync(inputFile));
const { layout } = config;
let allOk = true;

const tidyChar = {
  "\b": "⌫",
  "\n": "↵",
};

const tidy = (s) =>
  s
    .split("")
    .map((c) => (c in tidyChar ? tidyChar[c] : c))
    .join("");

const unescape = (html) =>
  html
    .replaceAll(/&lt;/g, "<")
    .replaceAll(/&gt;/g, ">")
    .replaceAll(/&amp;/g, "&");

const fillTemplate = (template, partials = {}) => {
  return template.replaceAll(/{{\s*(.*?)\s*}}/g, (_, name) => {
    if (name in partials) {
      return partials[name];
    }

    for (const dir of [templateDirectory, ...fallbackDirectories]) {
      const file = `${dir}/${name}`;
      if (fs.existsSync(file)) {
        const content = fillTemplate(String(fs.readFileSync(file)), partials);
        partials[name] = content;
        return content;
      }
    }

    throw new Error(`Partial ${name} cannot be found`);
  });
};

const defaultPartials = {
  layout: JSON.stringify(layout),
};

const generateTemplates = () => {
  const partials = {
    ...defaultPartials,
    FrontSide: "{{FrontSide}}",
    Output: "{{Output}}",
    Input: "{{Input}}",
  };

  const front = fillTemplate(String(fs.readFileSync(ankiFrontFile)), partials);
  const back = fillTemplate(String(fs.readFileSync(ankiBackFile)), partials);
  const style = fillTemplate(String(fs.readFileSync(ankiStyleFile)), partials);

  return [front, back, style];
};

const generateShell = (input, output) => {
  const partials = {
    ...defaultPartials,
    Output: output,
    Input: input,
  };

  partials.FrontSide = fillTemplate(
    String(fs.readFileSync(ankiFrontFile)),
    partials
  );

  partials.style = fillTemplate(
    String(fs.readFileSync(ankiStyleFile)),
    partials
  );

  partials.content = fillTemplate(
    String(fs.readFileSync(ankiBackFile)),
    partials
  );

  return fillTemplate(String(fs.readFileSync(ankiShellFile)), partials);
};

const checkTemplates = (anki, mid, noteConfig) => {
  const protoDir = `${ankiSrc}/proto/anki`;
  const protoFiles = fs
    .readdirSync(protoDir)
    .filter((f) => f.endsWith(".proto"))
    .map((f) => `${protoDir}/${f}`);
  const root = protobuf.loadSync(protoFiles);
  const Template = root.lookupType("Notetype.Template.Config");
  const NoteConfig = root.lookupType("Notetype.Config");

  const { css: ankiStyle } = NoteConfig.decode(noteConfig);

  if (!ankiStyle) {
    throw new Error("Cannot load anki style");
  }

  const templateStmt = anki.prepare(`
  SELECT config
  FROM templates
  WHERE ntid = ?
`);
  let i = 0;
  let ankiFront, ankiBack;
  for (const { config: templateConfig } of templateStmt.iterate(mid)) {
    const msg = Template.decode(templateConfig);
    ankiFront = msg.qFormat;
    ankiBack = msg.aFormat;

    if (i++) {
      throw new Error("Multiple templates detected");
    }
  }

  if (!ankiFront || !ankiBack) {
    throw new Error("Cannot load anki templates");
  }

  const [expectedFront, expectedBack, expectedStyle] = generateTemplates();

  [
    ["front", expectedFront, ankiFront],
    ["back", expectedBack, ankiBack],
    ["style", expectedStyle, ankiStyle],
  ].forEach(([label, expected, got]) => {
    if (expected.trimEnd() !== got.trimEnd()) {
      console.warn(`Card template ${label} is stale, replace with`);
      console.warn("-".repeat(40));
      console.warn(expected);
      console.warn("-".repeat(40));
      console.warn("");
      allOk = false;
    }
  });
};

const getCards = () => {
  const cards = [];

  const anki = sqlite3(ankiDatabase);
  anki.pragma("journal_mode = WAL");

  const res = anki
    .prepare("SELECT id, config FROM notetypes WHERE name = ? COLLATE nocase")
    .get(noteType);

  if (!res) {
    throw new Error(`Note type '${noteType}' does not exist in Anki database`);
  }

  const { id: mid, config } = res;
  checkTemplates(anki, mid, config);

  const stmt = anki.prepare(`
  SELECT notes.id, notes.flds, notes.tags, cards.queue
  FROM notes
  LEFT JOIN cards ON cards.nid = notes.id
  WHERE notes.mid = ?
`);
  for (const { id, flds, tags: tagString, queue } of stmt.iterate(mid)) {
    const tags = tagString.split(" ").filter((t) => t.length);
    const [outputHtml, inputString] = flds.split("\x1F");
    const output = unescape(outputHtml);
    const inputs = unescape(inputString).split(" - ");
    let input = inputs.map((i) => i.split(" "));
    if (input.length === 1) {
      input = input[0];
    }

    if (inputString.match(/\n/)) {
      console.warn(`Found newline in input of nid:${id}`);
      allOk = false;
    }
    if (inputString.match(/<\s*\/?\s*\w+/)) {
      console.warn(`Found HTML tag in input of nid:${id}`);
      allOk = false;
    }

    let suspended;
    switch (queue) {
      case -1: // suspended
        suspended = true;
        break;

      case -3: // user buried (in scheduler 2)
      case -2: // sched buried (in scheduler 2), buried (in scheduler 1)
      case 0: // new
      case 1: // learning
      case 2: // review
      case 3: // in learning, next rev in at least a day after the previous review
      case 4: // preview
        suspended = false;
        break;

      default:
        suspended = undefined;
        console.warn(
          `Unable to determine suspended state for card nid:${id} for ${inputString} => ${output}`
        );
        allOk = false;
        break;
    }

    cards.push({ id, output, input, tags, suspended });
  }

  return cards;
};

if (shellCombo) {
  fs.writeFileSync(shellOutput, generateShell(shellCombo, ""));
  process.exit(0);
}

const cards = getCards();
const cardForInput = {};
const chordForCombo = {};
let studyingChords = 0;
let studyingOther = 0;
const missingDups = [];

cards.forEach((card) => {
  let key;
  if (Array.isArray(card.input[0])) {
    key = card.input
      .map((i) =>
        i
          .map((c) => c.toUpperCase())
          .sort()
          .join("+")
      )
      .join(", ");
  } else {
    key = card.input
      .map((c) => c.toUpperCase())
      .sort()
      .join("+");
  }
  cardForInput[key] = card;
});

config.chords.forEach((chord) => {
  const key = chord.combo
    .map((c) => c.toUpperCase())
    .sort()
    .join("+");
  chordForCombo[key] = chord;
});

Object.values(chordForCombo).forEach((chord) => {
  const actions = [
    [false, false, chord.tap],
    [false, true, chord.tap?.shift],
    [true, false, chord.hold],
    [true, true, chord.hold?.shift],
  ];

  actions.forEach(([forHold, forShift, action]) => {
    if (!action) {
      return;
    }

    const alternates = [];
    if ("output" in action) {
      alternates.push([action.output, 0, false]);
    } else {
      alternates.push([action.behavior, 0, true]);
    }

    action.alternates?.forEach((alternate, i) => {
      if (alternate.toIdx === 0) {
        return;
      }
      alternates.push([alternate.to, i + 1, false]);
    });

    alternates.forEach(([result, dupCount, isBehavior]) => {
      let ok = true;
      const dups = dupCount ? ", Dup".repeat(dupCount) : "";

      const keyParts = [[...chord.combo]];
      if (chord.layers?.length) {
        keyParts.push([
          ...chord.layers.map((layer) => layout.keyForLayer[layer]),
          ...chord.combo,
        ]);
      }

      if (forHold) {
        keyParts.forEach((keyPart) => {
          keyPart.push("Hold");
        });
      }

      if (forShift) {
        keyParts.forEach((keyPart) => {
          keyPart.push("Shift");
        });
      }

      const keys = keyParts.map(
        (keyPart) =>
          keyPart
            .map((c) => c.toUpperCase())
            .sort()
            .join("+") + dups.toUpperCase()
      );

      const key = keys.find((key) => cardForInput[key]);
      const card = cardForInput[key];

      const combo = chord.combo.join("+") + dups;
      let context = `${forHold ? "hold" : "tap"}${
        forShift ? " shift" : ""
      } ${combo} => ${isBehavior ? result : tidy(result)}`;

      if (!card) {
        if (!action.intuited) {
          ok = false;
          if (dups) {
            missingDups.push(`No Anki card for chord: ${context}`);
          } else {
            allOk = false;
            console.warn(`No Anki card for chord: ${context}`);
          }
        }
        return;
      }

      context = `card nid:${card.id} for ${context}`;
      if (!card.tags.includes("chord")) {
        ok = false;
        allOk = false;
        console.warn(`Missing tag 'chord' for ${context}`);
      }

      if (isBehavior) {
        if (card.output !== result) {
          ok = false;
          allOk = false;
          console.warn(
            `Card nid:${card.id} for combo ${combo} does not match expected behavior`
          );
          console.warn(` Card: ${card.output}`);
          console.warn(`Chord: ${result}`);
        }
      } else {
        let expected = tidy(result);
        if (expected.length === 1 && expected.match(/[a-zA-Z]/)) {
          expected += " (word)";
        }

        if (card.output !== expected) {
          ok = false;
          allOk = false;
          console.warn(
            `Card nid:${card.id} for combo ${combo} does not match expected output`
          );
          console.warn(` Card: ${card.output}`);
          console.warn(`Chord: ${expected}`);
        }
      }

      delete cardForInput[key];

      if (ok) {
        if (card.suspended === false) {
          studyingChords++;
        }
      }
    });
  });
});

const seen = {};
seen.Alph = true; // hack: ignore this since in a way it's no inputs

const missing = [];

Object.keys(config.layout.keys[0])
  .sort((a, b) => a.includes("-" ? 1 : 0) - (b.includes("-") ? 1 : 0))
  .forEach((layer) => {
    config.layout.keys.forEach((key) => {
      let ok = true;

      const alpha = key.Alpha;
      const rawEffect = key[layer];

      if (rawEffect === "") {
        return;
      }

      const [baseLayer, mod] = layer.split("-");
      if (rawEffect === null && mod !== "Hold") {
        return;
      }

      const baseLayerKey = key[baseLayer];
      if (baseLayerKey === null) {
        return;
      }

      const implicitHold = rawEffect === null && mod === "Hold";
      const prefix = implicitHold ? "⌘" : "";
      const canonicalEffect = implicitHold
        ? `${prefix}${
            baseLayerKey.length === 1
              ? baseLayerKey.toUpperCase()
              : prefix && baseLayerKey.includes(" ")
              ? ` ${baseLayerKey}`
              : baseLayerKey
          }`
        : rawEffect;

      const inputs = [alpha];
      if (baseLayer !== "Alpha") {
        inputs.push(layout.keyForLayer[baseLayer]);
      }
      if (mod) {
        inputs.push(mod);
      }

      let input = inputs
        .map((c) => c.toUpperCase())
        .sort()
        .join("+");

      let context = `${canonicalEffect} via ${layer} ${alpha} (${input})`;
      let card = cardForInput[input];
      if (!card) {
        if (layout.modKeys[rawEffect]) {
          input = [rawEffect, ...(layout.labels[rawEffect] || [])]
            .map((i) => i.toUpperCase())
            .find((input) => cardForInput[input]);
          card = cardForInput[input];
        }
        if (!card) {
          ok = false;
          missing.push([canonicalEffect, `No Anki card for key: ${context}`]);
          return;
        }
      }

      seen[canonicalEffect] = true;

      context = `card nid:${card.id} for ${context}`;
      if (card.tags.includes("chord")) {
        ok = false;
        allOk = false;
        console.warn(`Spurious tag 'chord' for ${context}`);
      }

      let found = false;
      const effects = [canonicalEffect];
      if (implicitHold) {
        if (baseLayerKey in layout.labels) {
          effects.push(
            ...layout.labels[baseLayerKey].map(
              (label) =>
                `${prefix}${
                  label.length === 1
                    ? label.toUpperCase()
                    : prefix && label.includes(" ")
                    ? ` ${label}`
                    : label
                }`
            )
          );
        }
      } else {
        if (rawEffect in layout.labels) {
          effects.push(
            ...layout.labels[rawEffect].map(
              (label) =>
                `${prefix}${
                  prefix && label.includes(" ") ? ` ${label}` : label
                }`
            )
          );
        }
      }

      effects.forEach((effect) => {
        if (card.output === effect || card.output.startsWith(`${effect} (`)) {
          found = true;
        }
      });

      if (!found) {
        ok = false;
        allOk = false;
        console.warn(`Key does not match expected effect: ${context}`);
        console.warn(`Card: ${card.output}`);
        [...new Set(effects)]
          .sort((a, b) => a.length - b.length)
          .forEach((effect) => {
            console.warn(` Key: ${effect}`);
          });
      }

      if (ok && card.suspended === false) {
        studyingOther++;
      }

      ok = false;
      delete cardForInput[input];
    });
  });

missing.forEach(([effect, message]) => {
  if (seen[effect]) {
    return;
  }
  seen[effect] = true;
  allOk = false;
  console.warn(message);
});

Object.entries(cardForInput).forEach(([input, card]) => {
  if (!card.tags.includes("chord") && card.suspended === false) {
    studyingOther++;
  }
  allOk = false;
  console.warn(
    `Loose Anki card nid:${card.id} ${card.input.join(" ")} => ${
      card.output
    } (${input})`
  );
});

fs.writeFileSync(outputFile, JSON.stringify(config));

if (missingDups.length) {
  if (allOk) {
    for (const missing of missingDups) {
      console.warn(missing);
    }
  } else {
    console.warn(
      `Suppressed ${missingDups.length} low-severity ${
        missingDups.length === 1 ? "warning" : "warnings"
      } due to other errors`
    );
  }
}

console.log(
  `Studying ${studyingChords} of ${config.chords.length} chords, plus ${studyingOther} others`
);

#!/usr/bin/env node
const fs = require("fs");
const { SerialPort } = require("serialport");
const express = require("express");
const cors = require("cors");
const processedChords = "processed-anki.json";
const templateDirectory = "web";
const indexPage = `${templateDirectory}/live.html`;

const config = JSON.parse(fs.readFileSync(processedChords));

const TOPLAYER = config.layout.layers.length - 1;
const VIRT_KEYS = config.layout.keys.length;
const VIRT_KEYMULT_DOWN = 0;
const VIRT_KEYMULT_UP = 1;
const VIRT_KEYMULT_TAP = 2;
const VIRT_KEYMULT_HOLD = 3;
const VIRT_KEYMULT_LAST = 4;
const VIRT_WARN = 0;
const VIRT_HEARTBEAT = 1;
const VIRT_KEYS_START = VIRT_HEARTBEAT + 1;
const VIRT_KEYS_END = VIRT_KEYS_START + VIRT_KEYS * VIRT_KEYMULT_LAST;
const VIRT_COMBO_SHIFTED = VIRT_KEYS_END + 1;
const VIRT_CHORD_STARTED = VIRT_COMBO_SHIFTED + 1;
const VIRT_CHORD_ENDED_INDETERMINATE = VIRT_CHORD_STARTED + 1;
const VIRT_CHORD_ENDED_TAP = VIRT_CHORD_ENDED_INDETERMINATE + 1;
const VIRT_CHORD_ENDED_HOLD = VIRT_CHORD_ENDED_TAP + 1;
const VIRT_LAYER_ZERO = VIRT_CHORD_ENDED_HOLD + 1;
const VIRT_LAYER_LAST = VIRT_LAYER_ZERO + TOPLAYER;
const VIRT_MOD_ZERO = VIRT_LAYER_LAST + 1;
const VIRT_SHIFT_DOWN = VIRT_MOD_ZERO;
const VIRT_SHIFT_UP = VIRT_SHIFT_DOWN + 1;
const VIRT_CTRL_DOWN = VIRT_SHIFT_UP + 1;
const VIRT_CTRL_UP = VIRT_CTRL_DOWN + 1;
const VIRT_ALT_DOWN = VIRT_CTRL_UP + 1;
const VIRT_ALT_UP = VIRT_ALT_DOWN + 1;
const VIRT_GUI_DOWN = VIRT_ALT_UP + 1;
const VIRT_GUI_UP = VIRT_GUI_DOWN + 1;
const VIRT_MOD_LAST = VIRT_GUI_UP;
const VIRT_TIMEOUT = 1000;

const [nodePath, scriptPath, serialPath, port] = process.argv;
if (process.argv.length !== 4) {
  console.error(`usage: ${nodePath} ${scriptPath} serial-path port`);
  process.exit(1);
}

const indexForAlpha = {};
config.layout.keys.forEach((key, i) => {
  indexForAlpha[key.Alpha] = i;
});

const chordForCombo = {};
config.chords.forEach((chord) => {
  const key = chord.combo
    .map((k) => indexForAlpha[k])
    .sort()
    .join("+");
  chordForCombo[key] = chord;
});

const fillTemplate = (template, partials = {}) => {
  return template.replaceAll(/{{\s*(.*?)\s*}}/g, (_, name) => {
    if (name in partials) {
      return partials[name];
    }

    const file = `${templateDirectory}/${name}`;
    if (fs.existsSync(file)) {
      const content = fillTemplate(String(fs.readFileSync(file)), partials);
      partials[name] = content;
      return content;
    }

    throw new Error(`Partial ${name} cannot be found`);
  });
};

let listeners = [];
let currentCombo;
let currentComboShifted;
let currentLayer = config.layout.layers[0];
let currentMods = {
  shift: false,
  ctrl: false,
  alt: false,
  gui: false,
};
let currentDup;
let currentDupAlternate;
let currentDupAction;
let currentChordAction;
let dupMods = { ...currentMods };
let oneshotMods;
let keyTimers = {};
const downKeys = [];

const serial = new SerialPort({
  path: serialPath,
  baudRate: 115200,
});

const events = [];
setInterval(() => {
  const t = Date.now() - 1000 * 60 * 10;
  while (true) {
    const e = events[0];
    if (!e || e.time > t) {
      return;
    }
    events.shift();
  }
}, 1000 * 60);

const emit = (type, event = {}) => {
  const payload = { ...event, type, time: Date.now() };
  events.push(payload);

  const e = `${JSON.stringify(payload)}\n`;
  listeners.forEach((l) => {
    l.write(e);
  });
};

const layersToCheck = (mods) => {
  let layers = [currentLayer];
  ["Shift", "Ctrl", "Alt", "Gui"].forEach((mod) => {
    if (mods[mod.toLowerCase()]) {
      layers.unshift(...layers.map((layer) => `${layer}-${mod}`));
    }
  });
  layers.push("Alpha");
  return layers;
};

let wordBuffer = "";
const typed = (output, mods, mode) => {
  if (output === "") {
    return;
  }
  emit("typed", { output, mods, mode });

  output.split("").forEach((c) => {
    if (c === " " || c === "\n" || c === "\t") {
      if (wordBuffer.length) {
        emit("word", { word: wordBuffer });
      }
      wordBuffer = "";
    } else if (c === "\b") {
      if (mods.alt) {
        wordBuffer = "";
      } else {
        wordBuffer = wordBuffer.slice(0, wordBuffer.length - 1);
      }
    } else if (c === "\x1B") {
    } else if (mods.ctrl || mods.alt || mods.gui) {
    } else {
      wordBuffer += c;
    }
  });
};

serial.on("data", (data) => {
  for (let i = 0; i < data.length; i++) {
    const byte = data[i];

    if (byte === VIRT_WARN) {
      console.log("Got warning from keyboard");
      emit("warning");
    } else if (byte === VIRT_HEARTBEAT) {
    } else if (byte >= VIRT_KEYS_START && byte <= VIRT_KEYS_END) {
      const index = (byte - VIRT_KEYS_START) % VIRT_KEYS;

      if (currentCombo) {
        currentCombo.push(index);
      } else {
        const type = Math.floor((byte - VIRT_KEYS_START) / VIRT_KEYS);
        const key = config.layout.keys[index];

        if (type == VIRT_KEYMULT_DOWN) {
          if (keyTimers[index]) {
            keyTimers[index]();
          }
          emit("down", { key, index });
          downKeys.push(index);
        } else if (type == VIRT_KEYMULT_UP) {
          if (keyTimers[index]) {
            keyTimers[index]();
          }
          let timer;
          const cb = () => {
            if (timer) {
              emit("up", { key, index });
              downKeys.splice(downKeys.indexOf(index), 1);
              if (downKeys.length === 0) {
                emit("all-up");
              }
              delete keyTimers[index];
              clearInterval(timer);
              timer = null;
            }
          };
          timer = setTimeout(() => cb(), 50);
          keyTimers[index] = cb;
        } else if (type == VIRT_KEYMULT_TAP) {
          let output = null;

          const effectiveMods = { ...currentMods, ...(oneshotMods || {}) };
          oneshotMods = undefined;

          let mods = effectiveMods;
          let mode = "tap";

          layersToCheck(mods).forEach((layer) => {
            if (output === null && layer in key) {
              output = key[layer];
            }
          });

          emit("type", { output, key, index });

          if (output === "Dup") {
            mods = { ...dupMods };

            if (typeof currentDup === "string") {
              output = currentDup;
              if (output in config.layout.outputForKey) {
                output = config.layout.outputForKey[output];
              }
            } else if (typeof currentDup === "object") {
              mode = "alternate";
              const chord = currentDup;
              const action = chord[currentDupAction];
              if (action.alternates?.length) {
                const alternate = action.alternates[currentDupAlternate];
                currentDupAlternate =
                  (currentDupAlternate + 1) % action.alternates.length;
                output = alternate.append;
                if (!alternate.exact) {
                  output += " ";
                }
                if (alternate.backspaces) {
                  output = "\b".repeat(alternate.backspaces) + output;
                }
              } else {
                console.log("Dupping chord but has no alternates", { chord });
                output = "";
              }
            } else {
              output = "";
              console.warn(`Unexpected dup: ${currentDup}`);
            }
          } else {
            currentDup = output;
            if (output in config.layout.outputForKey) {
              output = config.layout.outputForKey[output];
            }
            dupMods = effectiveMods;
          }
          typed(output, mods, mode);
        } else if (type == VIRT_KEYMULT_HOLD) {
          const label = key[currentLayer] ?? key.Alpha;
          let output = key[`${currentLayer}-Hold`];

          const effectiveMods = { ...currentMods, ...(oneshotMods || {}) };
          oneshotMods = undefined;

          const mods = { ...effectiveMods };

          if (output === null) {
            mods.gui = true;
            output = label;
          } else {
            emit("type", { output, key, index });
          }

          emit("hold", { key, index });

          if (output in config.layout.outputForKey) {
            output = config.layout.outputForKey[output];
          }

          typed(output, mods, "hold");
          currentDup = output;
          dupMods = { ...effectiveMods };
          // Not implemented yet in qmk-config
          // dupMods = { ...mods };
        } else {
          console.warn(`Unhandled key byte: ${byte}`);
        }
      }
    } else if (byte === VIRT_COMBO_SHIFTED) {
      currentComboShifted = true;
    } else if (byte === VIRT_CHORD_STARTED) {
      currentCombo = [];
      currentComboShifted = false;
    } else if (
      byte === VIRT_CHORD_ENDED_INDETERMINATE ||
      byte === VIRT_CHORD_ENDED_TAP ||
      byte === VIRT_CHORD_ENDED_HOLD
    ) {
      const indexes = currentCombo.sort();
      const key = indexes.join("+");
      let chord = chordForCombo[key];

      if (currentComboShifted && !chord) {
        const shiftKeyAlpha = config.layout.modKeys.Shft;
        const shiftKeyIndex = config.layout.keyPosition[shiftKeyAlpha];
        const indexes = currentCombo.filter((i) => i !== shiftKeyIndex).sort();
        const key = indexes.join("+");
        chord = chordForCombo[key];
      }

      if (!chord) {
        console.warn(`No chord for combo '${key}'`);
        currentCombo = undefined;
        currentComboShifted = undefined;
        return;
      }

      const prevDup = currentDup;
      const prevAlt = currentDupAlternate;
      const prevAction = currentDupAction;

      if (byte === VIRT_CHORD_ENDED_TAP) {
        currentChordAction = "tap";
      } else if (byte === VIRT_CHORD_ENDED_HOLD) {
        currentChordAction = "hold";
      } else {
        currentChordAction = undefined;
      }

      if (currentChordAction) {
        emit("chord", {
          chord,
          indexes,
          action: currentChordAction,
          shifted: currentComboShifted,
        });
      } else {
        emit("indeterminate-chord", {
          chord,
          indexes,
          shifted: currentComboShifted,
        });
      }

      if (currentChordAction) {
        currentDup = chord;
        currentDupAlternate = 0;
        currentDupAction = currentChordAction;
      }

      if (currentChordAction) {
        let action = chord[currentChordAction];
        if (currentComboShifted && action.shift) {
          action = action.shift;
        }

        if (action.behavior) {
          switch (action.behavior) {
            case "delete-word":
              if (typeof prevDup === "object") {
                const chord = prevDup;
                const action = chord[prevAction];
                let output;
                if (action.alternates?.length) {
                  const i =
                    prevAlt === 0 ? action.alternates.length - 1 : prevAlt - 1;
                  const alternate = action.alternates[i];
                  output = alternate.to;
                  if (!alternate.exact) {
                    output += " ";
                  }
                } else {
                  output = action.output;
                  if (!action.exact) {
                    output += " ";
                  }
                }
                typed("\b".repeat(output.length), currentMods, "chord");
              } else {
                typed("\b", { alt: true }, "chord");
              }
              currentDup = undefined;
              break;
            case "left-click":
            case "right-click":
            case "Gui-left-click":
              emit(action.behavior);
              break;
            case "oneshot-Alpha":
            case "oneshot-Symbol":
            case "oneshot-Number":
            case "oneshot-Function":
              // Handled in layer event
              break;
            case "oneshot-Hyper":
              oneshotMods = { ctrl: true, alt: true, gui: true };
              break;
            default:
              console.warn(`Unhandled chord behavior: ${action.behavior}`);
              break;
          }
        } else {
          let output = action.output;
          if (!action.exact) {
            output += " ";
          }
          typed(output, currentMods, "chord");
        }
      }

      currentCombo = undefined;
      currentComboShifted = undefined;
    } else if (byte >= VIRT_LAYER_ZERO && byte <= VIRT_LAYER_LAST) {
      const layer = config.layout.layers[byte - VIRT_LAYER_ZERO];
      emit("layer", { layer, from: currentLayer });
      currentLayer = layer;
    } else if (byte >= VIRT_MOD_ZERO && byte <= VIRT_MOD_LAST) {
      let mod;
      let down;

      switch (byte) {
        case VIRT_SHIFT_DOWN:
        case VIRT_CTRL_DOWN:
        case VIRT_ALT_DOWN:
        case VIRT_GUI_DOWN:
          down = true;
          break;

        case VIRT_SHIFT_UP:
        case VIRT_CTRL_UP:
        case VIRT_ALT_UP:
        case VIRT_GUI_UP:
          down = false;
          break;

        default:
          console.warn(`Unhandled mod input ${byte}`);
          break;
      }

      switch (byte) {
        case VIRT_SHIFT_DOWN:
        case VIRT_SHIFT_UP:
          mod = "shift";
          break;

        case VIRT_CTRL_DOWN:
        case VIRT_CTRL_UP:
          mod = "ctrl";
          break;

        case VIRT_ALT_DOWN:
        case VIRT_ALT_UP:
          mod = "alt";
          break;

        case VIRT_GUI_DOWN:
        case VIRT_GUI_UP:
          mod = "gui";
          break;
      }

      currentMods[mod] = down;
      emit("mod", { mod, down });
    } else {
      console.warn(`Unhandled input ${byte}`);
    }
  }
});

serial.on("error", (error) => {
  if (serial.isOpen) {
    emit("error", { error });
    emit("close", { error });
    serial.close();
    serial.open();
  } else {
    setTimeout(() => {
      serial.open();
    }, 100);
  }
});

serial.on("close", (error) => {
  emit("close", { error });
  if (!error || error.disconnected) {
    serial.open();
  }
});

serial.on("open", () => {
  emit("connected");
  currentLayer = config.layout.layers[0];
  emit("layer", { layer: currentLayer, from: null });
  Object.keys(currentMods).forEach((mod) => {
    currentMods[mod] = false;
    emit("mod", { mod, down: false });
  });
  downKeys.splice(0, downKeys.length);
  serial.write(String.fromCharCode(VIRT_HEARTBEAT));
});

setInterval(() => {
  serial.write(String.fromCharCode(VIRT_HEARTBEAT));
}, VIRT_TIMEOUT / 2);

const app = express();

app.get("/events", (req, res) => {
  res.writeHead(200, {
    "Content-Type": "application/json",
    "Cache-Control": "no-cache",
  });
  listeners.push(res);

  let e = JSON.stringify({
    type: "initialize",
    config,
    state: {
      ...currentMods,
      layer: currentLayer,
    },
  });
  e += "\n";
  res.write(e);

  console.log("Listener connected");
  emit("listener");

  req.on("end", () => {
    listeners = listeners.filter((r) => r !== res);
    res.end();
  });
});

app.get("/config", cors({ origin: "https://monkeytype.com" }), (_, res) => {
  res.json(config);
});

app.get("/", (_, res) => {
  res.send(fillTemplate(String(fs.readFileSync(indexPage)), {}));
});

app.listen(port, () => {
  console.log(`Listening on ${port}`);
});
